{
    "componentChunkName": "component---src-templates-doc-page-layout-tsx",
    "path": "/blog/complexity-challenge/",
    "result": {"data":{"page":{"id":"2eeb38aa-dcaf-586f-a872-c7d5abc41ce6","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Complexity Challenge in Design Systems\",\n  \"author\": \"Sercan Leylek\",\n  \"description\": \"How to deal with the complexity problem of a design system in architecture level?\",\n  \"publishDate\": \"2022.03.22\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Ingress = makeShortcode(\"Ingress\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Ingress, {\n    mdxType: \"Ingress\"\n  }, \"How much complexity can we tolerate in a design system architecture? Or what is the fine balance of granularity for a design system to control the complexity at an optimum level?\"), mdx(\"p\", null, \"Architecture is the invisible blueprint of every IT system. As the DNA identifies the structure of an organism,\\nthe architecture clarifies the integrity of an IT system and its character makes impact on every level of the hierarchy.\\nTherefore, specifying the architecture is a fundamental step to solve the complexity problem of platform ecosystems.\\nBasically, architecture answers the question of what should be placed where in an IT system, whereas governance\\ndescribes who decides what.\"), mdx(\"p\", null, \"One of the reasons behind the need for design systems is surely to reduce the complexity. However, a design system without\\na proper architecture can contribute to the complexity problem and turn out to become a gridlock instead of solving the problem.\\nTherefore, design systems consist of sub-systems to create granularity (modularization). So that, the architecture\\nof a design system is the collection of those sub-systems and the applications that a design system is in interaction with.\\nCertainly, such hierarchical settlement is not an end to the complexity problem, but maybe a new and manageable beginning.\"), mdx(\"p\", null, \"An ecosystem\\u2019s complexity is a function of the number of unique subsystems present in it. The more numerous such subsystems,\\nthe greater its complexity. In a platform ecosystem, these subsystems are the platform and the apps that interoperate with it.\\nComplex systems that were complex to begin with can become even more complex over time as they evolve. (A. Tiwana (2013: Ch.5))\"), mdx(\"p\", null, \"Tiwana\\u2019s description of ecosystem complexity implies with the status of J\\xF8kul Design System in several aspects. Firstly,\\nthe number of components (sub-systems) in a design system specifies the complexity of its core. In the example of J\\xF8kul,\\nthe number of these components are surely increasing by time because the core team constantly looks for opportunities to\\nprovide reusable components for their client applications. Although the modularization of these components is well-partitioned,\\nthe same components have interdependencies as well. For instance, J\\xF8kul\\u2019s DatePicker component utilizes jkl-icon-button and\\njkl-text-input components of the same core and\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://static.nrk.no/core-components/latest/index.html?core-datepicker/readme.md\"\n  }, \"Core Datepicker library of NRK\"), \" is used as an external dependency.\\nThese components are needed to form the user interface of DatePicker and their functionalities are benefited at the same time.\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/assets/blog/jokul-datepicker-architecture.png\",\n    \"alt\": null\n  })), mdx(\"p\", null, \"The outcome in the example of DatePicker is the result of hierarchical modularization approach of design systems.\\nSome teams separate granular elements from more complex ones. The levels of granularity vary in number and perceived complexity.\\nAtomic design, pioneered by Brad Frost, is a popular example of hierarchical categorization. Atoms are the basic building blocks,\\nwhich combine to create more complex standalone elements: molecules. For example, a form label, input and button combine into\\na search form. Molecules join together into organisms (such as a site header), and organisms into templates and pages.\\n(A. Kholmatova (2017)) So that, jkl-icon-button and jkl-text-input components serve as the atoms of DatePicker molecule.\"), mdx(\"p\", null, \"In addition to that, the number of client applications which benefit J\\xF8kul Design System is also on the rise\\nbecause different parties of Fremtind AS promotes the use of design system within its organization. This fact also\\ncontributes to the growing complexity. Moreover, unlike J\\xF8kul, a highly evolved design system can be used by\\nseveral organizations and hundreds of different client applications.\"), mdx(\"h3\", null, \"Growing complexity in two different dimensions\"), mdx(\"p\", null, \"All in all, these two main points prove that a design system has growing complexity in two different dimensions.\\nOne, via the interdependencies of core components; two, via the number of client applications which use the design system.\"), mdx(\"p\", null, \"In any platform, complexity can be of two types: structural complexity and behavioral complexity. An ecosystem can be\\nboth structurally complex where interconnections between its parts are difficult to describe and behaviorally complex\\nwhere its aggregate behavior is difficult to predict or control. (A. Tiwana (2013: Ch.5)) Architecture handles the structural\\ncomplexity meanwhile governance cures behavioral complexity. In this article, we continue to assess the structural complexity of\\nJ\\xF8kul Design System.\"), mdx(\"h3\", null, \"So, how one should deal with the complexity of a platform?\"), mdx(\"p\", null, \"The advice of Tiwana and reasoning by straight forward thinking\\nsay that complexity should be reduced. It cannot be totally avoided and complexity will always be present, but it\\nshould be reduced at an acceptable and manageable level.\"), mdx(\"p\", null, \"In the example of J\\xF8kul\\u2019s DatePicker, present complexity can be reduced by writing imported components specific to\\nDatePicker component. So that, the changes in jkl-icon-button or jkl-text-input would have no impact on DatePicker and hence,\\nthe owners of J\\xF8kul could avoid potential regressions. However, this approach would not be practical in several conditions.\\nFirst, that would double the work of imported components. Second, it would be more difficult to control them because\\ncomponents will behave independently by time. Least to mention, the same approach would result in performance issues as well.\\nWriting specific minor components for DatePicker would increase the volume of packages. So that, the client applications\\nwould serve larger files to their customers. As a result, freeing J\\xF8kul\\u2019s DatePicker from jkl-icon-button and jkl-text-input\\ncomponent dependencies would increase the current complexity rather than reducing it.\\nThis is the internal dependency side of the complexity.\"), mdx(\"p\", null, \"As mentioned earlier, J\\xF8kul\\u2019s DatePicker utilizes NRK\\u2019s calendar library as well. This is actually one of the ways\\nhow J\\xF8kul is connected to an external platform. However, controlling the changes of NRK\\u2019s library is not possible for Fremtind AS.\\nTherefore, this dependency can create problems for J\\xF8kul in the future. Removing this dependency and re-writing it for\\nJ\\xF8kul can be beneficial and that would surely help them eliminate an external complexity, but core team is not eager to do so\\nbecause of the cost of re-writing a calendar library. This decision was discussed within the core team in a design forum meeting\\nin September 2020 and the team decided to keep on using NRK\\u2019s library.\"), mdx(\"p\", null, \"The example of J\\xF8kul\\u2019s DatePicker shows that core team accepts existing complexities and discusses these issues internally.\\nHowever, freeing all dependencies just for the sake of reduced complexity is not a final solution to all structural problems.\\nA design system team\\u2019s architecture should evaluate the options and choose suitable path to sustain manageable complexity with\\nthe help of architecture.\"), mdx(\"h3\", null, \"References\"), mdx(\"p\", null, \"A. Kholmatova (2017), \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.amazon.com/Design-Systems-practical-creating-languages/dp/3945749581\"\n  }, \"Design Systems: A practical guide to creating design languages for digital products\"), \", Smashing Media AG\"), mdx(\"p\", null, \"A. Tiwana (2013: Ch.5), \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.uio.no/studier/emner/matnat/ifi/IN5430/v20/pensumliste/readings/tiwana-platform-ecosystems-ch5.pdf\"\n  }, \"Platform Ecosystems: Aligning Architecture, Governance, and Strategy\"), \", Morgan Kaufmann Publishers\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Complexity Challenge in Design Systems","react":null,"scss":null,"order":null,"author":"Sercan Leylek","publishDate":"2022.03.22","group":null}}},"pageContext":{"id":"2eeb38aa-dcaf-586f-a872-c7d5abc41ce6","title":"Complexity Challenge in Design Systems"}},
    "staticQueryHashes": ["1583095916","1756004727","2550854682","3000541721"]}