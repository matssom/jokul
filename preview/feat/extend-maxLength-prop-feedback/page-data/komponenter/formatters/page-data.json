{
    "componentChunkName": "component---src-templates-doc-page-layout-tsx",
    "path": "/komponenter/formatters",
    "result": {"data":{"page":{"id":"fd53a259-779c-58d5-bef4-169271aa6de0","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Formatters\",\n  \"react\": \"formatters-util\",\n  \"group\": \"util\",\n  \"displayTypes\": \"- formatAvstand\\n- formatFodselsnummer\\n- formatKontonummer\\n- formatKortnummer\\n- formatNumber\\n- formatTelefonnummer\\n- formatValuta\\n\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Ingress = makeShortcode(\"Ingress\");\nvar ComponentExample = makeShortcode(\"ComponentExample\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Ingress, {\n    mdxType: \"Ingress\"\n  }, \"Bruk formatterere n\\xE5r du \\xF8nsker \\xE5 vise et tall med et spesifikt format; for eksempel et telefonnummer, et personnummer, eller et bel\\xF8p.\"), mdx(ComponentExample, {\n    title: \"Eksempler p\\xE5 bruk\",\n    component: FormattersExample,\n    codeExample: formattersExampleCode,\n    mdxType: \"ComponentExample\"\n  }), mdx(\"p\", null, \"Formatterere fungerer bra alle steder der du vil vise tallinformasjon p\\xE5 en m\\xE5te som er enklere \\xE5 lese for brukeren. Det kan v\\xE6re i l\\xF8pende tekst, tabeller, lister, eller liknende. Ved \\xE5 bruke formatererene fra J\\xF8kul sikrer du at tallinformasjon representeres likt p\\xE5 tvers av l\\xF8sningene v\\xE5re. Det skaper gjenkjennelighet for brukeren!\"), mdx(\"h2\", null, \"Maskering av skjemafelter\"), mdx(\"p\", null, \"Noen av formatererne kan ogs\\xE5 med fordel brukes til \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://en.wikipedia.org/wiki/Input_mask\"\n  }, \"maskering\"), \" av skjemafelter. Det kan gj\\xF8re det lettere for brukeren \\xE5 se at de har skrevet inn lange verdier (som kort- og kontonummer) riktig.\"), mdx(\"p\", null, \"For \\xE5 gj\\xF8re implementeringen av dette enklere tilbyr \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jkl-formatters-util\"), \" hjelpefunksjoner for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-hook-form\"), \" (kun for v7 eller nyere) som setter maske p\\xE5 feltet for deg:\"), mdx(ComponentExample, {\n    title: \"Bruk med formaterer\",\n    component: InputMaskExample,\n    codeExample: inputMaskExampleCode,\n    mdxType: \"ComponentExample\"\n  }), mdx(\"p\", null, \"Hjelpefunksjonene brukes p\\xE5 samme m\\xE5te som \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"register\"), \" fra \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-hook-form\"), \", men du m\\xE5 sende inn \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"form\"), \"-objektet fra \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useForm\"), \" som f\\xF8rste argument. Det legges ikke til validering, s\\xE5 om du \\xF8nsker dette m\\xE5 du legge det inn selv. Bruk gjerne \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/preview/feat/extend-maxLength-prop-feedback/komponenter/validators\"\n  }, \"validatorene i J\\xF8kul\"), \"!\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Formatters","react":"formatters-util","scss":null,"order":null,"author":null,"publishDate":null,"group":"util"}}},"pageContext":{"id":"fd53a259-779c-58d5-bef4-169271aa6de0","types":{"formatValuta":{"tags":{"param":"input Tallet som skal formateres til valuta\noptions Valgene fra formatNumber, pluss valg for prefix og suffix","returns":"Formatert bel√∏p"},"filePath":"../packages/formatters-util/src/index.ts","description":"Formaterer et gitt tall som valuta. Som standard vises suffikset \"kr\" og tallet formateres med norsk lokalisasjon","displayName":"formatValuta","methods":[],"props":{}}},"title":"Formatters"}},
    "staticQueryHashes": ["1583095916","1756004727","2550854682","3000541721"]}