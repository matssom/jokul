<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Jøkul Designsystem]]></title><description><![CDATA[Jøkul er designsystemet til Fremtind]]></description><link>http://github.com/dylang/node-rss</link><generator>GatsbyJS</generator><lastBuildDate>Mon, 02 May 2022 15:04:01 GMT</lastBuildDate><item><title><![CDATA[Høydepunkter fra april 2022]]></title><description><![CDATA[Et skikkelig løft ble gjort for å få Jøkul til å funke i  høykontrastmodus Portalen har fått en  ny onboardingflyt Vi samlet det vi har av guider for litt mer viderekomne under et  eget menypunkt Noen bugs i Figma-biblioteket har blitt retta TextInput og TextArea er responsive…]]></description><link>https://jokul.fremtind.no/blog/updates/april-2022/</link><guid isPermaLink="false">https://jokul.fremtind.no/blog/updates/april-2022/</guid><pubDate>Thu, 28 Apr 2022 00:00:00 GMT</pubDate><content:encoded>&lt;div&gt;Her er høydepunktene fra Jøkul i april.&lt;/div&gt;&lt;ul&gt;&lt;li&gt;Et skikkelig løft ble gjort for å få Jøkul til å funke i &lt;a href=&quot;https://www.smashingmagazine.com/2022/03/windows-high-contrast-colors-mode-css-custom-properties/&quot;&gt;høykontrastmodus&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Portalen har fått en &lt;a href=&quot;/preview/feat/stempelvarianter/kom-i-gang/introduksjon&quot;&gt;ny onboardingflyt&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Vi samlet det vi har av guider for litt mer viderekomne under et &lt;a href=&quot;/preview/feat/stempelvarianter/guider/hvordan-endre-jokul&quot;&gt;eget menypunkt&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Noen bugs i Figma-biblioteket har blitt retta&lt;ul&gt;&lt;li&gt;TextInput og TextArea er responsive igjen&lt;/li&gt;&lt;li&gt;Ditto navigasjonskort&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Støtte for React 18 og server-side rendering&lt;/li&gt;&lt;li&gt;Mulig å skjule &lt;em&gt;labels&lt;/em&gt; for alle skjemafelter visuelt&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Ellers pågår det en viktig diskusjon om &lt;a href=&quot;https://github.com/fremtind/jokul/discussions/2843&quot;&gt;compact og mobil i Figma-skisser&lt;/a&gt;. Om du har vært frustrert med tingenes tilstand er &lt;strong&gt;nå&lt;/strong&gt; tiden for å si ifra.&lt;/p&gt;&lt;h2&gt;Høykontrastmodus og Jøkul&lt;/h2&gt;&lt;p&gt;Kjerneteamet ble oppmerksomme på at Jøkul hadde &lt;a href=&quot;https://github.com/fremtind/jokul/issues/2812&quot;&gt;mange kritiske mangler&lt;/a&gt; som gjorde løsningene våre utilgjengelige for brukere av høykontrastmodus (forced colors). Disse er rettet, og det er &lt;strong&gt;viktig at alle oppdaterer&lt;/strong&gt; til nyeste versjon.&lt;/p&gt;&lt;div src=&quot;/assets/blog/updates/april-2022/failing-high-contrast.png&quot; caption=&quot;Et bilde fra før feilrettingen. Her er det egentlig to radioknapper, en sjekkboks, to tekstfelt og en datovelger. Ser du dem?&quot;&gt;&lt;/div&gt;&lt;h3&gt;Design for høykontrastmodus&lt;/h3&gt;&lt;p&gt;Høykontrastmodus legger noen begrensninger på design:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Vi har kun åtte farger&lt;/li&gt;&lt;li&gt;Alle åtte fargene er styrt av brukeren selv&lt;/li&gt;&lt;li&gt;Fargene er funksjonelle - aldri dekorative&lt;/li&gt;&lt;li&gt;Skygger finnes ikke&lt;/li&gt;&lt;li&gt;Bilder må antas å være visuelt utilgjengelige for brukeren&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Dette gir noen spennende utfordringer både på komponentnivå og høyere, for eksempel:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Er animasjoner og ulike tilstander synlige nok når vi ikke har skygger eller kan animere mellom farger?&lt;/li&gt;&lt;li&gt;Hvordan kan vi tydeliggjøre hvilken av knappene våre som er primær og sekundær?&lt;/li&gt;&lt;li&gt;Er det mulig å forstå innholdet på siden uten å se bilder, eller bruke skjermleser?&lt;/li&gt;&lt;li&gt;Hvordan skiller vi på ulike typer &lt;a href=&quot;/preview/feat/stempelvarianter/komponenter/tag&quot;&gt;tags&lt;/a&gt; når vi ikke har farger?&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Enn så lenge har fokuset til kjerneteamet vært på å få Jøkul til å fungere overhode i høykontrastmodus. Om du vil bryne deg på denne designutfordringen, si i fra på designsystemforum så hjelper noen fra kjerneteamet deg i gang!&lt;/p&gt;&lt;div src=&quot;/assets/blog/updates/april-2022/working-high-contrast.png&quot; caption=&quot;Etter feilrettingen er skjemakomponentene synlige, blant mye annet.&quot;&gt;&lt;/div&gt;&lt;h3&gt;Sjekk deres egen kode også&lt;/h3&gt;&lt;p&gt;Ta en sjekk på teamets egen kode også, for å se om dere har noen av de samme feilene vi gjorde i Jøkul.&lt;/p&gt;&lt;p&gt;De groveste feilene skjedde der vi skrudde av &lt;code&gt;border&lt;/code&gt; og &lt;code&gt;outline&lt;/code&gt; for å bruke &lt;code&gt;box-shadow&lt;/code&gt; til å lage designet vi var ute etter. I høykontrastmodus skrus &lt;em&gt;alt&lt;/em&gt; av &lt;code&gt;box-shadow&lt;/code&gt; helt av. Om du da ikke har &lt;code&gt;border&lt;/code&gt; eller &lt;code&gt;outline&lt;/code&gt; blir tingene dine usynlige.&lt;/p&gt;&lt;p&gt;Du finner to nye mixins i Jøkul som kan være til hjelp:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/fremtind/jokul/blob/148148f1e450666caa9da5d4714bbb0b44199446/packages/core/mixins/_helpers.scss#L40&quot;&gt;forced-colors-mode&lt;/a&gt; er en &lt;em&gt;media query&lt;/em&gt;-hjelper for å gjøre &lt;a href=&quot;https://github.com/fremtind/jokul/blob/148148f1e450666caa9da5d4714bbb0b44199446/packages/radio-button/radio-button.scss#L181&quot;&gt;resets som dette&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/fremtind/jokul/blob/148148f1e450666caa9da5d4714bbb0b44199446/packages/core/mixins/_helpers.scss#L63&quot;&gt;forced-colors-svg-fallback&lt;/a&gt; er en workaround for en browserbug i Chromium hvor SVGer som bruker &lt;code&gt;currentColor&lt;/code&gt; ikke får riktig farge&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Vi har skrevet noe om hvordan du kan teste i &lt;a href=&quot;/preview/feat/stempelvarianter/universell-utforming/testguide&quot;&gt;testguiden vår&lt;/a&gt; under Universell utforming.&lt;/p&gt;&lt;h2&gt;Ny onboarding&lt;/h2&gt;&lt;p&gt;Kjerneteamet har brukt april til å designe et nytt onboardingløp for Jøkul. En del av det er synlig her i portalen. På landingssiden finner du tre navigasjonskort som peker til en flunkende ny &lt;em&gt;Kom i gang&lt;/em&gt;-seksjon. Ta en titt, og kom gjerne med tilbakemeldinger!&lt;/p&gt;&lt;div title=&quot;Introduksjon&quot; to=&quot;/kom-i-gang/introduksjon&quot; component=&quot;[object Object]&quot; description=&quot;Start her om Jøkul er nytt for deg.&quot; style=&quot;max-width:300px&quot;&gt;&lt;/div&gt;&lt;h2&gt;Nytt sted for guider&lt;/h2&gt;&lt;p&gt;Med en ny &lt;em&gt;Kom i gang&lt;/em&gt;-seksjon endte vi opp med noe innhold som ikke helt passet inn, men som vi likevel ville ta vare på. De har fått et nytt hjem under &lt;a href=&quot;/preview/feat/stempelvarianter/guider/hvordan-endre-jokul&quot;&gt;Guider&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Sitter du inne med noen &lt;em&gt;hvordan kan jeg&lt;/em&gt;-spørsmål som kunne trengt en guide? Gi lyd, så kanskje det dukker opp en guide etter hvert.&lt;/p&gt;&lt;h2&gt;React 18 og server-side rendering&lt;/h2&gt;&lt;p&gt;React 18 ble &lt;a href=&quot;https://reactjs.org/blog/2022/03/29/react-v18.html&quot;&gt;lansert 29. mars&lt;/a&gt;, og Jøkul ble ferdig migrert 8. april. I forbindelse med oppgraderingen, nå som Reacts egen &lt;code&gt;useId&lt;/code&gt; er tilgjengelig i versjon 18, har Jøkul fått støtte for &lt;em&gt;server-side rendering&lt;/em&gt; og hydrering i klienten. Om du for eksempel vil bruke Jøkul i Remix skal det være mulig.&lt;/p&gt;&lt;p&gt;Jøkul støtter fortsatt React 17. Om du skulle støte på noen problemer med å bruke Jøkul på versjon 17 så si ifra!&lt;/p&gt;&lt;h2&gt;Skjule labels visuelt&lt;/h2&gt;&lt;p&gt;Nå er det mulig å gjøre så labels på skjemafelter bare dukker opp for skjermlesere. Alle skjemafelter har fått propen &lt;code&gt;labelProps&lt;/code&gt;, som du kan bruke til å sette &lt;code&gt;labelProps.srOnly&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;&amp;lt;TextInput label=&amp;quot;Godt navn&amp;quot; labelProps={{ srOnly: true }} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Diverse bugfikser&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;David Aasterud gjorde så den nye &lt;code&gt;useId&lt;/code&gt; med støtte for React 18 også fungerte riktig i React 17 (&lt;a href=&quot;https://github.com/fremtind/jokul/pull/2833&quot;&gt;#2833&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;Kenneth Apeland fikset en feil med tekstfarge i &lt;em&gt;dark mode&lt;/em&gt; på landingssiden (&lt;a href=&quot;https://github.com/fremtind/jokul/pull/2841&quot;&gt;#2841&lt;/a&gt;)&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Takk&lt;/h2&gt;&lt;p&gt;Takk til alle bidragsytere, både på GitHub og i Figma!&lt;/p&gt;&lt;ul&gt;&lt;li&gt;daa1&lt;/li&gt;&lt;li&gt;kennidenni&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;En stor takk også til alle som er med på designsystemforum!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Mars 2022]]></title><description><![CDATA[Her er høydepunktene fra Jøkul i mars: Ny komponent:  Footer Knapper  har varianter med pil på venstre eller høyre side Ekspanderbar tabellrad har fått et forbedret design Tabelloverskrifter kan alignes mot høyre Overskrifter i SummaryTable har blitt mer fleksible Formatering av…]]></description><link>https://jokul.fremtind.no/blog/updates/mars-2022/</link><guid isPermaLink="false">https://jokul.fremtind.no/blog/updates/mars-2022/</guid><pubDate>Fri, 25 Mar 2022 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Her er høydepunktene fra Jøkul i mars:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Ny komponent: &lt;a href=&quot;/preview/feat/stempelvarianter/komponenter/footer&quot;&gt;Footer&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/preview/feat/stempelvarianter/komponenter/buttons&quot;&gt;Knapper&lt;/a&gt; har varianter med pil på venstre eller høyre side&lt;/li&gt;&lt;li&gt;Ekspanderbar tabellrad har fått et forbedret design&lt;/li&gt;&lt;li&gt;Tabelloverskrifter kan alignes mot høyre&lt;/li&gt;&lt;li&gt;Overskrifter i SummaryTable har blitt mer fleksible&lt;/li&gt;&lt;li&gt;Formatering av telefonnummer kan inkludere landkode&lt;/li&gt;&lt;li&gt;DatePicker annonserer for skjermlesere når man går til et nytt år&lt;/li&gt;&lt;li&gt;Sercan blogget om Mixpanel og kompleksitet i designsystemer&lt;/li&gt;&lt;li&gt;En del husarbeid for utviklere:&lt;ul&gt;&lt;li&gt;Tabellkomponenter kan ta i mot en React ref&lt;/li&gt;&lt;li&gt;Forbedret ytelse i flere hooks&lt;/li&gt;&lt;li&gt;useAnimatedHeight kan brukes helt uten egen CSS&lt;/li&gt;&lt;li&gt;Core eksporterer nå &lt;a href=&quot;https://github.com/fremtind/jokul/pull/2794/commits/58515c857be6ed9d598e3147a6e6600fbb766d2a&quot;&gt;easinger og timinger som TypeScript&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;@include motion;&lt;/code&gt; kan brukes uten parametere&lt;/li&gt;&lt;li&gt;Feedback-komponenten med smileys får React keys&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Ellers skjer det mye jobbing i kjerneteamet med forbedringer &amp;quot;under panseret&amp;quot; både i Figma og i Sass-kode. Der gjenstår det fremdeles en del, men &lt;em&gt;watch this space&lt;/em&gt; 👀&lt;/p&gt;&lt;h2&gt;Footer&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;/preview/feat/stempelvarianter/komponenter/footer&quot;&gt;Footeren fra Fremtind&lt;/a&gt; fungerer som avsender av de respektive nettsidene og applikasjonene. Footer brukes når det kreves tilleggsinformasjon om opphavsrett, kontaktinformasjon, lenker til andre sider eller lignende.&lt;/p&gt;&lt;div title=&quot;Footer&quot; knobs=&quot;[object Object]&quot;&gt;&lt;/div&gt;&lt;h2&gt;Knapper med piler&lt;/h2&gt;&lt;p&gt;Et vanlig mønster er å bruke &lt;a href=&quot;/preview/feat/stempelvarianter/komponenter/buttons&quot;&gt;knapper&lt;/a&gt; med piler til navigasjon i skjemaflyter med flere steg. De ulike Buttons har fått nye varianter med pil på høyre og venstre side. Om du for eksempel har knapper med teksene &lt;em&gt;Forrige&lt;/em&gt; og &lt;em&gt;Neste&lt;/em&gt; kan du vurdere å legge på disse pilene. Stakseth og kennidenni ordnet denne varianten i Figma og i kode.&lt;/p&gt;&lt;div&gt;&lt;button aria-live=&quot;polite&quot; class=&quot;jkl-button jkl-button--secondary jkl-spacing-s--right&quot;&gt;&lt;div class=&quot;jkl-button__content&quot;&gt;&lt;div class=&quot;jkl-button__slider&quot;&gt;&lt;span aria-hidden=&quot;true&quot;&gt;← &lt;/span&gt;Forrige&lt;/div&gt;&lt;/div&gt;&lt;/button&gt;&lt;button aria-live=&quot;polite&quot; class=&quot;jkl-button jkl-button--primary&quot;&gt;&lt;div class=&quot;jkl-button__content&quot;&gt;&lt;div class=&quot;jkl-button__slider&quot;&gt;Neste&lt;span aria-hidden=&quot;true&quot;&gt; →&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/button&gt;&lt;/div&gt;&lt;h2&gt;Forbedringer i Table&lt;/h2&gt;&lt;p&gt;JoMs og Murstam har jobbet med et forbedret design for ekspanderbare tabellrader på mobil. Det er ikke lenger noen &lt;em&gt;border&lt;/em&gt; før det ekspanderte innholdet, og ekspanderknappen har blitt plassert til høyre. Målet er at det ekspanderte innholdet skal kunne virke mer som en del av den ekspanderte raden, i stedet for en egen rad.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/assets/blog/updates/mars-2022/ekspander-rad.gif&quot;/&gt;&lt;/p&gt;&lt;p&gt;JoMs fikset en &lt;code&gt;align&lt;/code&gt;-prop på &lt;code&gt;TableHeader&lt;/code&gt;, så overskriften kan justeres mot høyre hvis kolonnen er det. Han ordnet også at tabellkomponenter kan motta en &lt;code&gt;ref&lt;/code&gt; hvis du trenger det.&lt;/p&gt;&lt;h2&gt;Formatering av telefonnummer med landkode&lt;/h2&gt;&lt;p&gt;JoMs slår til igjen. Du kan nå legge til en landkode når du formaterer telefonnummere.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;const formatted = formatTelefonnummer(&amp;quot;81549300&amp;quot;, {
    countryCode: &amp;quot;47&amp;quot;,
});
// &amp;quot;+47 815 49 300&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;DatePicker annonserer nytt år&lt;/h2&gt;&lt;p&gt;Ved årsskiftet ble det lagt merke til at DatePicker ikke annonserte for skjermlesere når man hadde flyttet seg fra 2022 til 2021. Man kunne &lt;em&gt;anta&lt;/em&gt; at man hadde flyttet seg til desember 2021, men nå slipper man å anta. DatePicker er endret så skjermlesere annonserer årstallet én gang når man bytter kalenderår.&lt;/p&gt;&lt;h2&gt;SummaryTable med skjult overskrift&lt;/h2&gt;&lt;p&gt;Vi fortsetter med skjermlesere. Mikail har ordnet så SummaryTable sine overskrifter kan være ReactNodes, ikke bare &lt;code&gt;string&lt;/code&gt;. Med andre ord kan man sende inn for eksempel en &lt;code&gt;&amp;lt;span className=&amp;quot;jkl-sr-only&amp;quot;&amp;gt;&lt;/code&gt; dersom man trenger å skjule overskrifter visuelt, men beholde de for skjermlesere.&lt;/p&gt;&lt;h2&gt;Husarbeid for utviklere&lt;/h2&gt;&lt;h3&gt;Forbedringer i hooks&lt;/h3&gt;&lt;p&gt;Flere hooks har fått forbedret ytelse. &lt;code&gt;useScreen&lt;/code&gt; og &lt;code&gt;useBrowserPreferences&lt;/code&gt; bruker nå andre lyttere enn tidligere for å beregne typen skjerm (liten, medium, stor, XL) og brukerens ønsker for fargetema og redusert bevegelse. Det burde gi betydelig færre re-renders ute i apper ved endring av skjermstørrelse.&lt;/p&gt;&lt;p&gt;Hvis du bruker &lt;code&gt;useAnimatedHeight&lt;/code&gt; kan du nå bruke den helt uten egen CSS for å styre synlighet. Hooken ordner alt selv.&lt;/p&gt;&lt;h3&gt;Diverse bugfikser&lt;/h3&gt;&lt;p&gt;HenrikHermansen fikset en bug i Feedback hvor smileys ikke fikk en React &lt;code&gt;key&lt;/code&gt;. Han fikset også så typedefinisjoner blir eksportert fra &lt;code&gt;@fremtind/jkl-image-react&lt;/code&gt; på riktig måte.&lt;/p&gt;&lt;p&gt;BjorneOmaFremtind og wkillerud avdekket og fikset enda flere bugs i TextArea i starten av mars.&lt;/p&gt;&lt;p&gt;Checkboxer som har en egen ID fikk en regresjon som gjorde at de ikke fungerte, og ble fikset igjen.&lt;/p&gt;&lt;p&gt;JoMs forbedret koden for å parse tall, som har blitt litt strengere med hva den godtar.&lt;/p&gt;&lt;h2&gt;Takk&lt;/h2&gt;&lt;p&gt;Takk til alle bidragsytere, både på GitHub og i Figma!&lt;/p&gt;&lt;ul&gt;&lt;li&gt;HenrikHermansen&lt;/li&gt;&lt;li&gt;BjorneOmaFremtind&lt;/li&gt;&lt;li&gt;kennidenni&lt;/li&gt;&lt;li&gt;Stakseth&lt;/li&gt;&lt;li&gt;JoMs&lt;/li&gt;&lt;li&gt;Murstam&lt;/li&gt;&lt;li&gt;SercanSercan&lt;/li&gt;&lt;li&gt;Mikaila94&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;En stor takk også til alle som er med på designsystemforum!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Complexity Challenge in Design Systems]]></title><description><![CDATA[Architecture is the invisible blueprint of every IT system. As the DNA identifies the structure of an organism,
the architecture clarifies the integrity of an IT system and its character makes impact on every level of the hierarchy.
Therefore, specifying the architecture is a…]]></description><link>https://jokul.fremtind.no/blog/complexity-challenge/</link><guid isPermaLink="false">https://jokul.fremtind.no/blog/complexity-challenge/</guid><pubDate>Tue, 22 Mar 2022 00:00:00 GMT</pubDate><content:encoded>&lt;div&gt;How much complexity can we tolerate in a design system architecture? Or what is the fine balance of granularity for a design system to control the complexity at an optimum level?&lt;/div&gt;&lt;p&gt;Architecture is the invisible blueprint of every IT system. As the DNA identifies the structure of an organism,
the architecture clarifies the integrity of an IT system and its character makes impact on every level of the hierarchy.
Therefore, specifying the architecture is a fundamental step to solve the complexity problem of platform ecosystems.
Basically, architecture answers the question of what should be placed where in an IT system, whereas governance
describes who decides what.&lt;/p&gt;&lt;p&gt;One of the reasons behind the need for design systems is surely to reduce the complexity. However, a design system without
a proper architecture can contribute to the complexity problem and turn out to become a gridlock instead of solving the problem.
Therefore, design systems consist of sub-systems to create granularity (modularization). So that, the architecture
of a design system is the collection of those sub-systems and the applications that a design system is in interaction with.
Certainly, such hierarchical settlement is not an end to the complexity problem, but maybe a new and manageable beginning.&lt;/p&gt;&lt;p&gt;An ecosystem’s complexity is a function of the number of unique subsystems present in it. The more numerous such subsystems,
the greater its complexity. In a platform ecosystem, these subsystems are the platform and the apps that interoperate with it.
Complex systems that were complex to begin with can become even more complex over time as they evolve. (A. Tiwana (2013: Ch.5))&lt;/p&gt;&lt;p&gt;Tiwana’s description of ecosystem complexity implies with the status of Jøkul Design System in several aspects. Firstly,
the number of components (sub-systems) in a design system specifies the complexity of its core. In the example of Jøkul,
the number of these components are surely increasing by time because the core team constantly looks for opportunities to
provide reusable components for their client applications. Although the modularization of these components is well-partitioned,
the same components have interdependencies as well. For instance, Jøkul’s DatePicker component utilizes jkl-icon-button and
jkl-text-input components of the same core and
&lt;a href=&quot;https://static.nrk.no/core-components/latest/index.html?core-datepicker/readme.md&quot;&gt;Core Datepicker library of NRK&lt;/a&gt; is used as an external dependency.
These components are needed to form the user interface of DatePicker and their functionalities are benefited at the same time.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/assets/blog/jokul-datepicker-architecture.png&quot;/&gt;&lt;/p&gt;&lt;p&gt;The outcome in the example of DatePicker is the result of hierarchical modularization approach of design systems.
Some teams separate granular elements from more complex ones. The levels of granularity vary in number and perceived complexity.
Atomic design, pioneered by Brad Frost, is a popular example of hierarchical categorization. Atoms are the basic building blocks,
which combine to create more complex standalone elements: molecules. For example, a form label, input and button combine into
a search form. Molecules join together into organisms (such as a site header), and organisms into templates and pages.
(A. Kholmatova (2017)) So that, jkl-icon-button and jkl-text-input components serve as the atoms of DatePicker molecule.&lt;/p&gt;&lt;p&gt;In addition to that, the number of client applications which benefit Jøkul Design System is also on the rise
because different parties of Fremtind AS promotes the use of design system within its organization. This fact also
contributes to the growing complexity. Moreover, unlike Jøkul, a highly evolved design system can be used by
several organizations and hundreds of different client applications.&lt;/p&gt;&lt;h3&gt;Growing complexity in two different dimensions&lt;/h3&gt;&lt;p&gt;All in all, these two main points prove that a design system has growing complexity in two different dimensions.
One, via the interdependencies of core components; two, via the number of client applications which use the design system.&lt;/p&gt;&lt;p&gt;In any platform, complexity can be of two types: structural complexity and behavioral complexity. An ecosystem can be
both structurally complex where interconnections between its parts are difficult to describe and behaviorally complex
where its aggregate behavior is difficult to predict or control. (A. Tiwana (2013: Ch.5)) Architecture handles the structural
complexity meanwhile governance cures behavioral complexity. In this article, we continue to assess the structural complexity of
Jøkul Design System.&lt;/p&gt;&lt;h3&gt;So, how one should deal with the complexity of a platform?&lt;/h3&gt;&lt;p&gt;The advice of Tiwana and reasoning by straight forward thinking
say that complexity should be reduced. It cannot be totally avoided and complexity will always be present, but it
should be reduced at an acceptable and manageable level.&lt;/p&gt;&lt;p&gt;In the example of Jøkul’s DatePicker, present complexity can be reduced by writing imported components specific to
DatePicker component. So that, the changes in jkl-icon-button or jkl-text-input would have no impact on DatePicker and hence,
the owners of Jøkul could avoid potential regressions. However, this approach would not be practical in several conditions.
First, that would double the work of imported components. Second, it would be more difficult to control them because
components will behave independently by time. Least to mention, the same approach would result in performance issues as well.
Writing specific minor components for DatePicker would increase the volume of packages. So that, the client applications
would serve larger files to their customers. As a result, freeing Jøkul’s DatePicker from jkl-icon-button and jkl-text-input
component dependencies would increase the current complexity rather than reducing it.
This is the internal dependency side of the complexity.&lt;/p&gt;&lt;p&gt;As mentioned earlier, Jøkul’s DatePicker utilizes NRK’s calendar library as well. This is actually one of the ways
how Jøkul is connected to an external platform. However, controlling the changes of NRK’s library is not possible for Fremtind AS.
Therefore, this dependency can create problems for Jøkul in the future. Removing this dependency and re-writing it for
Jøkul can be beneficial and that would surely help them eliminate an external complexity, but core team is not eager to do so
because of the cost of re-writing a calendar library. This decision was discussed within the core team in a design forum meeting
in September 2020 and the team decided to keep on using NRK’s library.&lt;/p&gt;&lt;p&gt;The example of Jøkul’s DatePicker shows that core team accepts existing complexities and discusses these issues internally.
However, freeing all dependencies just for the sake of reduced complexity is not a final solution to all structural problems.
A design system team’s architecture should evaluate the options and choose suitable path to sustain manageable complexity with
the help of architecture.&lt;/p&gt;&lt;h3&gt;References&lt;/h3&gt;&lt;p&gt;A. Kholmatova (2017), &lt;a href=&quot;https://www.amazon.com/Design-Systems-practical-creating-languages/dp/3945749581&quot;&gt;Design Systems: A practical guide to creating design languages for digital products&lt;/a&gt;, Smashing Media AG&lt;/p&gt;&lt;p&gt;A. Tiwana (2013: Ch.5), &lt;a href=&quot;https://www.uio.no/studier/emner/matnat/ifi/IN5430/v20/pensumliste/readings/tiwana-platform-ecosystems-ch5.pdf&quot;&gt;Platform Ecosystems: Aligning Architecture, Governance, and Strategy&lt;/a&gt;, Morgan Kaufmann Publishers&lt;/p&gt;</content:encoded></item><item><title><![CDATA[6 Advice on Mixpanel Integration]]></title><description><![CDATA[User analytics is one of the most fundamental features that every popular web application should perform.
Without collecting data about user activities, one can never be sure of the user experience.
The developer team will invest days on some functionality, but unless they know…]]></description><link>https://jokul.fremtind.no/blog/six-advice-on-mixpanel/</link><guid isPermaLink="false">https://jokul.fremtind.no/blog/six-advice-on-mixpanel/</guid><pubDate>Sat, 12 Mar 2022 00:00:00 GMT</pubDate><content:encoded>&lt;div&gt;Mixpanel is a business analytics service which tracks user interactions on web and mobile applications. Integrating a tracking analytics tool with an application may seem like a simple task, but this story recommends to review your plan once more.&lt;/div&gt;&lt;p&gt;User analytics is one of the most fundamental features that every popular web application should perform.
Without collecting data about user activities, one can never be sure of the user experience.
The developer team will invest days on some functionality, but unless they know how many users use this precious feature,
they will only guess and hope that the users are benefiting from it.
In other words, “Without data you’re just another person with an opinion.” W. Edwards Deming.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/assets/blog/quote-edwards-deming-data-opinion.jpg&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.pinterest.com/pin/760123243333129174/&quot;&gt;via Pinterest&lt;/a&gt;&lt;/p&gt;&lt;p&gt;To clarify the ambiguity, my production team of &lt;a href=&quot;https://meldeskade.no&quot;&gt;https://meldeskade.no/&lt;/a&gt; decided to use popular business analytics tool, &lt;a href=&quot;https://mixpanel.com/&quot;&gt;Mixpanel&lt;/a&gt;.
Our single page web application is built with ReactJS, uses Jøkul Design System and hundreds of users visit the website
to report their insurance activities every day.
In short, meldeskade.no is a typical SPA which promises the user to follow a set of operations
under some sections and complete the user request somewhere along the way.&lt;/p&gt;&lt;p&gt;From the perspective of a front-end developer, I thought including Mixpanel tracking would be a simple task. However, as our team gained more and more experience in the field, I started to realize the obstacles. We followed the path of ‘learning by doing’ and eventually, our Mixpanel tracking started to deliver us data. So, this article will help to those who are in the beginning of their Mixpanel journey and looking for some useful advice.&lt;/p&gt;&lt;h3&gt;#1 Don’t underestimate the integration work&lt;/h3&gt;&lt;p&gt;Know your enemy first! Adding Mixpanel to your web application is an integration process and system integration is maybe the most problematic fields in information technology. Because linking different systems increases the complexity. Although the relationship between a web application and Mixpanel is a one-way road, the integration will still be painful, and it has the potential to produce unforeseen errors.&lt;/p&gt;&lt;p&gt;For instance, if you perform some tracking event before initializing the Mixpanel with the code below, application will have a fatal error and whole website will be down for the user. This error can seem obvious, but one exceptional case for some users might be the end of the show. Therefore, do not underestimate the complexity of integration process.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { MixpanelUtils } from &amp;#x27;./MixpanelUtils&amp;#x27;;
...
MixpanelUtils.Init();
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;#2 Document every tracking operation first, code later&lt;/h3&gt;&lt;p&gt;Teamwork is required in order to integrate a web application with Mixpanel. Naturally, a web developer cannot sit alone and write all the tracking operations on their own for a large system. Product owner, architect, tester, and tech lead should give their consent on what user activities will be tracked besides developers. Since people from different roles are involved in the process, it is important to keep decisions in one open document.&lt;/p&gt;&lt;p&gt;The team of meldeskade.no created a table which lists all tracking events. We included many columns for every event such as definition, trigger case for the tracking, its parameters, development status and we even wrote down the JIRA ticket for each tracking. This strategy helped the team solve the complexity of the problem.&lt;/p&gt;&lt;p&gt;Besides, we still keep this document active. Whenever the team needs to implement a new Mixpanel tracking, we start the work by documenting. So, document first, code later.&lt;/p&gt;&lt;h3&gt;#3 Don’t try to track too many events on first deployment&lt;/h3&gt;&lt;p&gt;Since our team underestimated the complexity of adding Mixpanel to our website, we set an ambitious goal for our delivery. We tried to implement at least 10 different tracking operations in one go. However, you should also implement configuration code for Mixpanel. These are OptInTracking, alias, identify, getting cookie consent of the user, etc. This is the threshold that one team should initially come over to reach for tracking events. When a team wraps all of these in a single deployment, the development work grows much more than expected. Therefore, the goal on first deployment should be a successful configuration of Mixpanel, and a couple of meaningful tracking operations.&lt;/p&gt;&lt;h3&gt;#4 Surprise! Surprise! You need a backend developer :)&lt;/h3&gt;&lt;p&gt;This is a point that our team failed to foresee. We basically thought we had all the data out there. We should only write some well-organized tracking operations in JS and everything will go smoothly. However, the data flow of a web application is not like what you see on a webpage as a human being. For example, you want to track some category data after the user clicks a section, but the component that you are triggering the event from may not contain the category information as a prop. Therefore, you need to ask the backend developer to provide this additional data via corresponding API call.&lt;/p&gt;&lt;p&gt;This tip is very much related to the advice #2. If the developers communicate about where and how to obtain the data attributes in the documentation, the process will go simultaneous and smooth.&lt;/p&gt;&lt;h3&gt;#5 You will discover defects along the way&lt;/h3&gt;&lt;p&gt;This might be one of the greatest paybacks for all the effort performed to reach the goal. As you implement more tracking on different components of a React application, you will discover some defects that have been omitted by you and other fellow front-end developers. React redundant rendering problems are known, but mostly ignored defects. And they are not easily discovered by tester, neither they truly create some run time error, but they are there. While adding more tracking operations, you will clearly see those mistakes and you will have the opportunity to fix them with some refactoring process. This practice will increase the performance of the application.&lt;/p&gt;&lt;h3&gt;#6 GDPR is everyone’s responsibility. Speak up when in doubt.&lt;/h3&gt;&lt;p&gt;Every team member should be observant on potential GDPR violation. More data does not help to understand user interaction better, but key data does. Users’ private data does not play any role while measuring the efficiency of an application. Therefore, speak up when you are in doubt of some data that your team is about to collect.&lt;/p&gt;&lt;p&gt;(This article was previously published on &lt;a href=&quot;https://storksnestblog.wordpress.com/2022/03/12/6-advice-on-mixpanel-integration%ef%bf%bc/&quot;&gt;Stork&amp;#x27;s Nest&lt;/a&gt;)&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Infrastrukturen til Jøkul]]></title><description><![CDATA[Fredag 4. mars holdt jeg en kort presentasjon om infrastrukturen til Jøkul for ansatte i Fremtind. Det var en lyninnføring i monorepo og verktøyene vi bruker for å gå fra kode på  localhost  til endringen er i produksjon. Dette er en oppsummering for de som ikke fikk med seg…]]></description><link>https://jokul.fremtind.no/blog/infrastrukturen-til-jokul-2022/</link><guid isPermaLink="false">https://jokul.fremtind.no/blog/infrastrukturen-til-jokul-2022/</guid><pubDate>Wed, 09 Mar 2022 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Fredag 4. mars holdt jeg en kort presentasjon om infrastrukturen til Jøkul for ansatte i Fremtind. Det var en lyninnføring i monorepo og verktøyene vi bruker for å gå fra kode på &lt;code&gt;localhost&lt;/code&gt; til endringen er i produksjon.&lt;/p&gt;&lt;p&gt;Dette er en oppsummering for de som ikke fikk med seg presentasjonen &lt;em&gt;live&lt;/em&gt;. Fremtind-ansatte kan også finne et opptak av presentasjonen under Fagtimen.&lt;/p&gt;&lt;p&gt;Her er &lt;a href=&quot;https://www.figma.com/file/tUnhcpsbsdJz1LNT0153I7/Fagtime-om-infrastrukturen-til-J%C3%B8kul?node-id=0%3A1&quot;&gt;FigJamen jeg brukte&lt;/a&gt; underveis i presentasjonen om du vil bla litt i den selv:&lt;/p&gt;&lt;iframe style=&quot;border:1px solid rgba(0, 0, 0, 0.1)&quot; width=&quot;800&quot; height=&quot;450&quot; src=&quot;https://www.figma.com/embed?embed_host=share&amp;amp;url=https%3A%2F%2Fwww.figma.com%2Ffile%2FtUnhcpsbsdJz1LNT0153I7%2FFagtime-om-infrastrukturen-til-J%25C3%25B8kul%3Fnode-id%3D0%253A1&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;h2&gt;Lyninnføring i monorepo&lt;/h2&gt;&lt;p&gt;Koden til Jøkul er organisert som et &lt;em&gt;monorepo&lt;/em&gt; i repositoriet &lt;a href=&quot;https://github.com/fremtind/jokul/&quot;&gt;fremtind/jokul&lt;/a&gt; på GitHub.&lt;/p&gt;&lt;p&gt;Kort fortalt går idéen om et monorepo ut på at man samler flere selvstendige men relaterte prosjekter i det samme Git-repositoriet. Det gjør det enklere å gjøre endringer på tvers av disse prosjektene, men gir noen unike utfordringer.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://monorepo.tools&quot;&gt;Monorepo.tools&lt;/a&gt; har en fin oversikt om du vil lære litt mer.&lt;/p&gt;&lt;p&gt;For Jøkul sin del betyr det at vi har en samling med selvstendige pakker i mappen &lt;a href=&quot;https://github.com/fremtind/jokul/tree/main/packages&quot;&gt;packages&lt;/a&gt;, i tillegg til &lt;a href=&quot;https://github.com/fremtind/jokul/tree/main/portal&quot;&gt;portalen&lt;/a&gt;. Pakkene (og portalen) er organisert med &lt;a href=&quot;https://classic.yarnpkg.com/en/docs/workspaces&quot;&gt;Yarn workspaces&lt;/a&gt; slik at pakker som avhenger av hverandre i monorepoet alltid bruker den lokale versjonen, ikke versjonen som er publisert på NPM. Det gjør det mye enklere å teste endringer.&lt;/p&gt;&lt;p&gt;I tillegg finner du en &lt;a href=&quot;https://github.com/fremtind/jokul/blob/main/package.json&quot;&gt;package.json&lt;/a&gt; på rotnivå i repositoriet. Her samler vi avhengigheter, konfigurasjon og scripts som gjelder for &lt;em&gt;alle&lt;/em&gt; pakkene.&lt;/p&gt;&lt;h2&gt;La oss gjøre en endring&lt;/h2&gt;&lt;p&gt;La oss følge en tenkt endring hvor vi legger til en ID-prop i &lt;code&gt;LoaderProps&lt;/code&gt;-interfacet:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;export interface LoaderProps {
    id?: string; // Denne!
    className?: string;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Kjør bygg og tester&lt;/h3&gt;&lt;p&gt;Når endringen er gjort må vi sjekke at vi ikke har innført noen feil. Det gjør vi ved å kjøre &lt;code&gt;yarn build&lt;/code&gt; og &lt;code&gt;yarn ci:test&lt;/code&gt; fra &lt;a href=&quot;https://github.com/fremtind/jokul/blob/main/package.json&quot;&gt;rotnivå&lt;/a&gt;. Hva skjer da?&lt;/p&gt;&lt;p&gt;Hver pakke har sitt eget &lt;code&gt;build&lt;/code&gt;-script som beskriver hvordan den pakken bygges. På rotnivå ber vi &lt;a href=&quot;https://turborepo.org&quot;&gt;Turborepo&lt;/a&gt; ta seg av kjøringen av disse scriptene.&lt;/p&gt;&lt;p&gt;Turborepo bygger pakker i riktig rekkefølge, og cacher resultatet mellom bygg. Hvis en pakke ikke har noen endringer så kjøres heller ikke bygget. Det sparer oss for potensielt mye tid, siden et bygg av alle pakker tar et par minutter.&lt;/p&gt;&lt;p&gt;Byggscriptene ute i pakkene ser for det meste ganske like ut.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Reactpakkene bruker &lt;a href=&quot;https://rollupjs.org/guide/en/&quot;&gt;Rollup&lt;/a&gt; og &lt;a href=&quot;https://babeljs.io&quot;&gt;Babel&lt;/a&gt; for å kompilere TypeScript til JavaScript.&lt;/li&gt;&lt;li&gt;Stilpakkene bruker &lt;a href=&quot;https://gulpjs.com&quot;&gt;Gulp&lt;/a&gt; for å kompilere &lt;a href=&quot;https://sass-lang.com&quot;&gt;Sass&lt;/a&gt; til CSS&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Enhetstesting gjøres med &lt;a href=&quot;https://jestjs.io&quot;&gt;Jest&lt;/a&gt;, og linting med &lt;a href=&quot;https://eslint.org&quot;&gt;ESLint&lt;/a&gt; og &lt;a href=&quot;https://stylelint.io&quot;&gt;Stylelint&lt;/a&gt;. Til slutt gjør testscriptet en typesjekk med &lt;a href=&quot;https://www.typescriptlang.org/tsconfig/#noEmit&quot;&gt;TypeScript&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;Lag en commit&lt;/h3&gt;&lt;p&gt;I Jøkul bruker vi &lt;a href=&quot;https://github.com/commitizen/cz-cli&quot;&gt;Commitizen&lt;/a&gt; for å få strukturerte commitmeldinger i et spesielt format, &lt;a href=&quot;https://www.conventionalcommits.org/en/v1.0.0/&quot;&gt;Conventional Commits&lt;/a&gt;. Formatet bruker vi senere for å automatisk beregne riktig versjonsnummer når endringen skal publiseres, og for å legge til commitmeldingene i pakkens changelog.&lt;/p&gt;&lt;p&gt;Vi har en egen kommando, &lt;code&gt;yarn commit&lt;/code&gt;, som tar deg gjennom en veiviser, sånn at du slipper å tenke på formatering.&lt;/p&gt;&lt;p&gt;Før commiten lages kjøres det et par kommandoer i en precommit-hook, satt opp med &lt;a href=&quot;https://github.com/typicode/husky&quot;&gt;Husky&lt;/a&gt; og &lt;a href=&quot;https://github.com/okonet/lint-staged&quot;&gt;lint-staged&lt;/a&gt;. Hooken kjører &lt;a href=&quot;https://commitlint.js.org/&quot;&gt;Commitlint&lt;/a&gt; og &lt;a href=&quot;https://prettier.io&quot;&gt;Prettier&lt;/a&gt;, i tillegg til &lt;a href=&quot;https://eslint.org&quot;&gt;ESLint&lt;/a&gt; og &lt;a href=&quot;https://stylelint.io&quot;&gt;Stylelint&lt;/a&gt; med &amp;quot;auto-fix&amp;quot; skrudd på. Dette er en ekstra liten sikkerhetssjekk, og sørger for at all koden i Jøkul følger det samme formatet uten at utviklere trenger å tenke noe på det.&lt;/p&gt;&lt;h2&gt;Hva skjer under en pull request?&lt;/h2&gt;&lt;p&gt;Pull requests sjekkes av en &lt;a href=&quot;https://github.com/fremtind/jokul/blob/main/.github/workflows/pull_request.yml&quot;&gt;workflow på GitHub Actions&lt;/a&gt;. Den gjør en hel del ting i bakgrunnen for å sikre at det ikke har skjedd noe uventet.&lt;/p&gt;&lt;p&gt;Workflowen gjør en rask sjekk for å se om det er endret noen filer som gjør at vi trenger en grundig sjekk. Hvis det for eksempel bare er endret litt på en tekst i en Readme-fil så trenger vi ikke kjøre alle mulige slags tester.&lt;/p&gt;&lt;p&gt;I eksempelet vårt gjør vi endring i TypeScript, så da blir det &lt;em&gt;full pakke&lt;/em&gt; 🍕&lt;/p&gt;&lt;h3&gt;Actions bygger&lt;/h3&gt;&lt;p&gt;Actions bygger pakkene med &lt;a href=&quot;https://turborepo.org&quot;&gt;Turborepo&lt;/a&gt; på samme måte som på &lt;code&gt;localhost&lt;/code&gt;. Så bygger den portalen.&lt;/p&gt;&lt;p&gt;Portalen er laget med &lt;a href=&quot;https://www.gatsbyjs.com&quot;&gt;Gatsby&lt;/a&gt; for å kunne bruke React-komponentene fra Jøkul for å bygge statiske nettsider. Innholdet kommer for det meste fra &lt;code&gt;.mdx&lt;/code&gt;-filer rundtomkring, som er Markdown med React-støtte.&lt;/p&gt;&lt;h3&gt;Actions tester&lt;/h3&gt;&lt;p&gt;Actions kjører de samme testene som vi gjorde lokalt, men i tillegg kjøres visuelle regresjonstester med &lt;a href=&quot;https://www.cypress.io&quot;&gt;Cypress&lt;/a&gt;. Cypress-testene fordeles i en matrise med fem &lt;em&gt;runners&lt;/em&gt;. Hver runner kjører en versjon av portalen som nettop ble bygget.&lt;/p&gt;&lt;p&gt;For hver test tar Cypress et skjermbilde og sammenligner med et skjermbilde som ligger i Git. På den måten fanger vi opp uforventede endringer.&lt;/p&gt;&lt;h3&gt;Actions forhåndsviser&lt;/h3&gt;&lt;p&gt;Til slutt bygger Actions også en versjon av portalen med en annen URL, og denne publiseres på &lt;a href=&quot;https://pages.github.com&quot;&gt;GitHub Pages&lt;/a&gt; som et slags &amp;quot;staging-miljø&amp;quot; så vi kan forhåndsvise endringer.&lt;/p&gt;&lt;p&gt;Hvis alle automatiske tester går OK og du får en godkjent review av en kollega er det klart for å merge.&lt;/p&gt;&lt;h2&gt;Automatisert publisering&lt;/h2&gt;&lt;p&gt;Når en pull request merges er det &lt;a href=&quot;https://github.com/fremtind/jokul/blob/main/.github/workflows/release.yml&quot;&gt;release-workflowen&lt;/a&gt; som tar over. Det er her &lt;a href=&quot;https://github.com/lerna/lerna&quot;&gt;Lerna&lt;/a&gt; kommer inn og sjekker Git-historikken sammenlignet med forrige publisering. Hele denne workflowen går uten at et menneske er involvert 🤖&lt;/p&gt;&lt;h3&gt;Versjonering&lt;/h3&gt;&lt;p&gt;Lerna leser &lt;a href=&quot;https://www.conventionalcommits.org/en/v1.0.0/&quot;&gt;commitmeldinger&lt;/a&gt; for å se om det skal publiseres en ny &lt;a href=&quot;https://semver.org&quot;&gt;SemVer&lt;/a&gt; &lt;em&gt;patch&lt;/em&gt;, &lt;em&gt;minor&lt;/em&gt;, eller &lt;em&gt;major&lt;/em&gt;. For eksempel:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;BREAKING CHANGE:&lt;/code&gt; blir til en major&lt;/li&gt;&lt;li&gt;&lt;code&gt;feat:&lt;/code&gt; blir til en minor&lt;/li&gt;&lt;li&gt;&lt;code&gt;fix:&lt;/code&gt; blir til en patch&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Det kan være mange commits som samles inn i samme release, og Lerna er smart nok til å velge rett versjon fra samlingen. For eksempel vil en &lt;code&gt;fix&lt;/code&gt; pluss en &lt;code&gt;BREAKING CHANGE&lt;/code&gt; totalt sett bli én major-versjon, ikke først en patch og så en major.&lt;/p&gt;&lt;p&gt;Når Lerna har beregnet ferdig oppdaterer den alle &lt;code&gt;package.json&lt;/code&gt; i repoet med de nye versjonsnummerene. Lerna samler også alle commitmeldinger og putter dem i pakkenes changelogs.&lt;/p&gt;&lt;h3&gt;Publisering&lt;/h3&gt;&lt;p&gt;Ved publisering bygger Actions pakkene på samme måte som før, med Turborepo. Deretter publiserer Lerna de nye pakkene til &lt;a href=&quot;https://www.npmjs.com/search?q=keywords%3Afremtind&quot;&gt;NPM&lt;/a&gt; og &lt;a href=&quot;https://github.com/orgs/fremtind/packages?repo_name=jokul&quot;&gt;GitHub Packages&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Til slutt bygger Actions en ny versjon av portalen som publiseres til GitHub Pages.&lt;/p&gt;&lt;p&gt;Nå er alt klart til å brukes! 🎉&lt;/p&gt;&lt;h2&gt;Spørsmål som ble stilt&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Hvorfor er det delt i to pakker, en for CSS og en for React?&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Det gir en større fleksibilitet. Ikke alle kan bruke React, og om f. eks. React-koden gjør &lt;code&gt;import &amp;quot;./styles.scss&amp;quot;&lt;/code&gt; for å få stiler ville det lagt ganske kraftige føringer for hvilke byggverktøy som brukes ute i teamene.&lt;/p&gt;&lt;h2&gt;Veien videre&lt;/h2&gt;&lt;p&gt;Vi undersøker for tiden alternativer til Lerna, siden det dessverre ikke vedlikeholdes og holder oss på Yarn Classic. Du kan følge &lt;a href=&quot;https://github.com/fremtind/jokul/discussions/2626&quot;&gt;diskusjonen på GitHub&lt;/a&gt; om du vil se mer om alternativene og veien videre.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Februar 2022]]></title><description><![CDATA[Det har skjedd en hel del i Jøkul i februar! Noen høydepunkter: Figma-biblioteket har fått en stor overhaling med: ny onboarding interaktive komponenter én komponent per side alfabetisk sortering av komponenter i biblioteket labels til skjemafelter er nå bare varianter, ikke egne…]]></description><link>https://jokul.fremtind.no/blog/updates/februar-2022/</link><guid isPermaLink="false">https://jokul.fremtind.no/blog/updates/februar-2022/</guid><pubDate>Fri, 25 Feb 2022 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Det har skjedd en hel del i Jøkul i februar! Noen høydepunkter:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Figma-biblioteket har fått en stor overhaling med:&lt;ul&gt;&lt;li&gt;ny onboarding&lt;/li&gt;&lt;li&gt;interaktive komponenter&lt;/li&gt;&lt;li&gt;én komponent per side&lt;/li&gt;&lt;li&gt;alfabetisk sortering av komponenter i biblioteket&lt;/li&gt;&lt;li&gt;labels til skjemafelter er nå bare varianter, ikke egne komponenter&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Nytt design på skjemakomponenter&lt;/li&gt;&lt;li&gt;Ny majorversjon av core: oppdaterte breakpoints, og dropping av støtte for Internet Explorer&lt;/li&gt;&lt;li&gt;Ny komponent: &lt;a href=&quot;/preview/feat/stempelvarianter/komponenter/breadcrumb&quot;&gt;Brødsmulesti&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/preview/feat/stempelvarianter/komponenter/card&quot;&gt;Card&lt;/a&gt; har blitt helt ny&lt;/li&gt;&lt;li&gt;MessageBox har fått en &lt;code&gt;forceCompact&lt;/code&gt;-prop&lt;/li&gt;&lt;li&gt;Formateringsfunksjoner og maskering av inputfelter&lt;/li&gt;&lt;li&gt;Unicode-tegnet &lt;a href=&quot;https://github.com/fremtind/jokul/pull/2696/files&quot;&gt;ZERO_WIDTH_SPACE&lt;/a&gt; har blitt lagt til i &lt;code&gt;constants-util&lt;/code&gt;. Bruk det til ordbryting!&lt;/li&gt;&lt;li&gt;Bloggen har fått RSS&lt;/li&gt;&lt;li&gt;I toppmenyen her i portalen har sidetitler blitt til &lt;em&gt;lenker&lt;/em&gt; (de var &lt;em&gt;knapper&lt;/em&gt;), som betyr at du lettere kan åpne i nye faner&lt;/li&gt;&lt;li&gt;Select har fått støtte for custom søk&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Figma&lt;/h2&gt;&lt;p&gt;Etter en storopprydding har Figma-biblioteket blitt en del mer oversiktlig. Hver komponent har sin egen &lt;em&gt;page&lt;/em&gt;, sortert alfabetisk. Det gjør det raskere å finne fram til oversikten over variants, siden du ikke trenger å gjette på hvilken kategori en &lt;code&gt;Link&lt;/code&gt; hører til. Den er på &lt;code&gt;Link&lt;/code&gt;-siden, ferdig.&lt;/p&gt;&lt;p&gt;Forresten, om du savner labels til skjemaer så finner en &lt;em&gt;variant&lt;/em&gt; av skjemafeltene som har den.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/assets/blog/updates/februar-2022/form-label-variants.gif&quot;/&gt;&lt;/p&gt;&lt;p&gt;Det har også kommet en onboarding med de viktigste tingene du trenger å vite for å bruke og &lt;em&gt;endre&lt;/em&gt; Figma-biblioteket. Sjekk &lt;code&gt;Introduction&lt;/code&gt; om du ikke har lest den allerede.&lt;/p&gt;&lt;h2&gt;Nytt design på skjemakomponenter&lt;/h2&gt;&lt;p&gt;Skjemafelter med valideringsfeil har fått et nytt design, hvor en viktig del er at vi har en tydelig visuell indikator som &lt;em&gt;ikke er en farge&lt;/em&gt;. Valideringsfeil vises nå sammen med en varseltrekant, og selve skjemafeltet fylles med feilfargen vår.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/assets/blog/updates/februar-2022/form-error-state.gif&quot;/&gt;&lt;/p&gt;&lt;p&gt;Du kan teste et skjema med det nye designet &lt;a href=&quot;/preview/feat/stempelvarianter/eksempler/skjemavalidering/&quot;&gt;her i portalen&lt;/a&gt;, eller se komponentdokumentasjonen til de forskjellige skjemakomponentene våre.&lt;/p&gt;&lt;h2&gt;Ny majorversjon av core&lt;/h2&gt;&lt;p&gt;Du finner de tekniske detaljene i &lt;a href=&quot;https://github.com/fremtind/jokul/blob/main/packages/core/MIGRATION.md#til-jkl-core900&quot;&gt;migrasjonsguiden på GitHub&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;Oppdaterte breakpoints&lt;/h3&gt;&lt;p&gt;Vi ble enige om nye verdier for breakpoints i Jøkul i fjor høst. I februar ble de oppdatert i kode! Du finner de nye breakpointsene &lt;a href=&quot;/preview/feat/stempelvarianter/universell-utforming/responsivt-design#breakpoints-vi-bruker-i-j%C3%B8kul&quot;&gt;på siden om responsivt design&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;Droppet støtte for IE11&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;/preview/feat/stempelvarianter/blog/jokul-dropper-ie-stotte/&quot;&gt;Som varslet i november&lt;/a&gt; har Jøkul fjernet gammel kode som utelukkende var for å støtte Internet Explorer 11. Ingen av Fremtind sine løsninger støtter den nettleseren lenger, så da kunne vi ta en vårrengjøring i koden.&lt;/p&gt;&lt;h2&gt;Breadcrumb&lt;/h2&gt;&lt;p&gt;Basert på et førsteutkast fra BM-teamet og justert litt underveis, &lt;a href=&quot;/preview/feat/stempelvarianter/komponenter/breadcrumb&quot;&gt;Breadcrumb&lt;/a&gt; er nå tilgjengelig i Jøkul.&lt;/p&gt;&lt;h2&gt;Card&lt;/h2&gt;&lt;p&gt;En flott gruppe Fremtindere har jobbet lenge og grundig med &lt;a href=&quot;/preview/feat/stempelvarianter/komponenter/card&quot;&gt;Card&lt;/a&gt;, og i februar ble det lansert helt nye kort. Det er delt inn i tre typer:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Navikasjonskort&lt;/li&gt;&lt;li&gt;Oppgavekort&lt;/li&gt;&lt;li&gt;Infokort&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Ta en titt på de ulike variantene og bruken av dem i Figma eller i &lt;a href=&quot;/preview/feat/stempelvarianter/komponenter/card&quot;&gt;komponentdokumentasjonen&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;MessageBox&lt;/h2&gt;&lt;p&gt;MessageBox har hatt en kompaktvariant i Figma lenge, men den har manglet i kode. &lt;em&gt;Nå er den her!&lt;/em&gt;&lt;/p&gt;&lt;div class=&quot;jkl-message-box jkl-message-box--info jkl-message-box--compact&quot; role=&quot;none presentation&quot; data-theme=&quot;light&quot;&gt;&lt;svg class=&quot;jkl-message-box__icon&quot; aria-hidden=&quot;true&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; clip-rule=&quot;evenodd&quot; d=&quot;M24 12C24 18.6274 18.8503 24 12 24C5.59548 24 0 18.6274 0 12C0 5.37258 5.59548 0 12 0C18.8503 0 24 5.37258 24 12ZM11 17.4142V10H13.2229V17.4142H11.2229ZM12 8.5C12.9133 8.5 13.4729 7.94036 13.4729 7.25C13.4729 6.55964 12.9133 6 12 6C11.5325 6 10.9729 6.55964 10.9729 7.25C10.9729 7.94036 11.5325 8.5 12 8.5Z&quot; fill=&quot;currentColor&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;div class=&quot;jkl-message-box__content&quot;&gt;&lt;p class=&quot;jkl-small&quot;&gt;Hvis du setter tekststørrelsen på innholdet selv får du best effekt ved å bruke &lt;code&gt;small&lt;/code&gt; som tekststørrelse!&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2&gt;Formateringsfunksjoner og maskering&lt;/h2&gt;&lt;p&gt;En ny pakke har blitt lansert med &lt;a href=&quot;/preview/feat/stempelvarianter/komponenter/formatters&quot;&gt;en samling formateringsfunksjoner&lt;/a&gt; som du kan bruke når du skal vise avstander, valuta, telefon-, kort-, fødsels- eller kontonummer.&lt;/p&gt;&lt;p&gt;Flere av disse formateringsfunksjonene gjør seg også fint til &lt;a href=&quot;/preview/feat/stempelvarianter/komponenter/formatters#maskering-av-skjemafelter&quot;&gt;maskering av skjemafelter&lt;/a&gt;. Om du bruker versjon 7 av &lt;code&gt;react-hook-form&lt;/code&gt; er det noen ferdiglagede støttefunksjoner i biblioteket som gjør det enkelt å ta i bruk.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/assets/blog/updates/februar-2022/input-masks.gif&quot;/&gt;&lt;/p&gt;&lt;h2&gt;Portalen&lt;/h2&gt;&lt;p&gt;Om du er en av de som aldri helt ga slipp på RSS, eller en av de som nylig (gjen)oppdaget denne fantasiske teknologien – denne er for deg:&lt;/p&gt;&lt;p&gt;Jøkul-bloggen har endelig fått en RSS-feed!&lt;/p&gt;&lt;p&gt;Du skal kunne peke RSS-leseren din på &lt;a href=&quot;https://jokul.fremtind.no&quot;&gt;jokul.fremtind.no&lt;/a&gt;, men hvis du trenger en direktelenke til feeden så er den &lt;a href=&quot;https://jokul.fremtind.no/blog/rss.xml&quot;&gt;jokul.fremtind.no/blog/rss.xml&lt;/a&gt;.&lt;/p&gt;&lt;iframe src=&quot;https://giphy.com/embed/J5k8XuTKXiaMye1row&quot; width=&quot;480&quot; height=&quot;270&quot; frameBorder=&quot;0&quot; class=&quot;giphy-embed&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;p&gt;&lt;a href=&quot;https://giphy.com/gifs/nasa-nasareactions-J5k8XuTKXiaMye1row&quot;&gt;via GIPHY&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Custom søk i Select&lt;/h2&gt;&lt;p&gt;Select har fått utvided sin &lt;code&gt;searchable&lt;/code&gt; prop til å kunne ta en funksjon som filtrer en string eller et &lt;code&gt;ValuePair&lt;/code&gt; mot en string. Dette kan brukes til å for eksempel søke etter organisasjonsnummer i en select som egentlig bare vise navn på bedrifter.&lt;/p&gt;&lt;h2&gt;Bugfikser&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Fjernet unødvendige marginer i ExpandButton (&lt;a href=&quot;https://github.com/fremtind/jokul/issues/2737&quot;&gt;#2737&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;Fikset visning av årstall i utvidet datovelger (&lt;a href=&quot;https://github.com/fremtind/jokul/issues/2707&quot;&gt;#2707&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;Unødvendig alt-tekst leses ikke lenger opp for ikoner (&lt;a href=&quot;https://github.com/fremtind/jokul/issues/2679&quot;&gt;#2679&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;TextArea har fått flere bugfikser (&lt;a href=&quot;https://github.com/fremtind/jokul/issues/2634&quot;&gt;#2634&lt;/a&gt;, &lt;a href=&quot;https://github.com/fremtind/jokul/issues/2717&quot;&gt;#2717&lt;/a&gt;, &lt;a href=&quot;https://github.com/fremtind/jokul/issues/2721&quot;&gt;#2721&lt;/a&gt;, &lt;a href=&quot;https://github.com/fremtind/jokul/issues/2751&quot;&gt;#2751&lt;/a&gt;, &lt;a href=&quot;https://github.com/fremtind/jokul/issues/2752&quot;&gt;#2752&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;Select kan styres med &lt;code&gt;value&lt;/code&gt;-prop (&lt;a href=&quot;https://github.com/fremtind/jokul/issues/2589&quot;&gt;#2589&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;Klikk på tekstfelt i søkbar Select lukker ikke menyen lenger (&lt;a href=&quot;https://github.com/fremtind/jokul/issues/2400&quot;&gt;#2400&lt;/a&gt;)&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Takk&lt;/h2&gt;&lt;p&gt;Takk til alle bidragsytere, både på GitHub og i Figma!&lt;/p&gt;&lt;ul&gt;&lt;li&gt;BjorneOmaFremtind&lt;/li&gt;&lt;li&gt;hjellek&lt;/li&gt;&lt;li&gt;JoMs&lt;/li&gt;&lt;li&gt;kennidenni&lt;/li&gt;&lt;li&gt;Murstam&lt;/li&gt;&lt;li&gt;SercanSercan&lt;/li&gt;&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Jøkul dropper støtte for Internet Explorer]]></title><description><![CDATA[Torsdag 4. november ble det tatt en sjekk av Internet Explorer-støtte i de ulike teamene i Fremtind.
På teamledermøtet tirsdag 9. november ble det bekreftet at ingen av Fremtinds løsninger har behov
for fortsatt støtte for Internet Explorer. Hva betyr dette for brukere av Jøkul…]]></description><link>https://jokul.fremtind.no/blog/jokul-dropper-ie-stotte/</link><guid isPermaLink="false">https://jokul.fremtind.no/blog/jokul-dropper-ie-stotte/</guid><pubDate>Mon, 15 Nov 2021 00:00:00 GMT</pubDate><content:encoded>&lt;div&gt;Etter en kartlegging i teamene har Fremtind offisielt avsluttet støtte for Internet Explorer.&lt;/div&gt;&lt;p&gt;Torsdag 4. november ble det tatt en sjekk av Internet Explorer-støtte i de ulike teamene i Fremtind.
På teamledermøtet tirsdag 9. november ble det bekreftet at ingen av Fremtinds løsninger har behov
for fortsatt støtte for Internet Explorer.&lt;/p&gt;&lt;h2&gt;Hva betyr dette for brukere av Jøkul?&lt;/h2&gt;&lt;p&gt;Det betyr at Jøkul avslutter støtte for IE fra og med i dag.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Nye features vil &lt;em&gt;ikke&lt;/em&gt; utvikles med støtte for Internet Explorer.&lt;/li&gt;&lt;li&gt;Vi vil &lt;em&gt;ikke&lt;/em&gt; rette browser-spesifike feil for IE.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Det vil bli en ryddejobb i Jøkul som ender i en &lt;i&gt;breaking change&lt;/i&gt; for &lt;code&gt;@fremtind/jkl-core&lt;/code&gt; (og dermed de fleste andre pakkene):&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Jøkul sin &lt;code&gt;browserslist&lt;/code&gt; vil oppdateres til ikke å inkludere &lt;code&gt;ie 11&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;IE-spesifik kode vil forsvinne (for eksempel &lt;code&gt;inverted&lt;/code&gt;).&lt;/li&gt;&lt;li&gt;Dokumentasjon som bare gjelder IE vil fjernes, med unntak av gamle bloggposter.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Dette vil sannsynligvis skje i starten av 2022.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Creating Markers on Google Maps]]></title><description><![CDATA[You can watch the tutorial video below and this article serves as a summary of the implementation on YouTube. IMarker Interface and marker hook First, we should create an interface for our marker, right? I want to keep three basic data attributes for a marker.
Of course, the…]]></description><link>https://jokul.fremtind.no/blog/creating-markers-google-maps/</link><guid isPermaLink="false">https://jokul.fremtind.no/blog/creating-markers-google-maps/</guid><pubDate>Fri, 05 Nov 2021 00:00:00 GMT</pubDate><content:encoded>&lt;div&gt;This is the second post and video in a tutorial series on Google Maps, React, and TypeScript. After setting up Google Maps project in React and rendering the map, the next task is to add markers on the map with click event.&lt;/div&gt;&lt;p&gt;You can watch the tutorial video below and this article serves as a summary of the implementation on YouTube.&lt;/p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/Id2NtV3TcMQ&quot; title=&quot;YouTube video player&quot; frameBorder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;h3&gt;IMarker Interface and marker hook&lt;/h3&gt;&lt;p&gt;First, we should create an interface for our marker, right? I want to keep three basic data attributes for a marker.
Of course, the label of a marker could be also added here as another string value, but I want to keep things simple.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;interface IMarker {
    address: string;
    latitude: number;
    longitude: number;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Based on this interface, I also create the marker hook which will store the content.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;const [marker, setMarker] = useState&amp;lt;IMarker&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Event Listener&lt;/h3&gt;&lt;p&gt;While working with Google Maps on React, you should still write some Vanilla JS code as well. I don’t like this, but we do not have another choice.
As soon as the &lt;code&gt;map&lt;/code&gt; hook is initialised, we add a click listener into this function.
This event listener will return us a &lt;code&gt;LatLng&lt;/code&gt; object which will be used to get the coordinates from &lt;code&gt;geocoder.&lt;/code&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;const initEventListener = ():void =&amp;gt; {
    if (map) {
        google.maps.event.addListener(map, &amp;#x27;click&amp;#x27;, function(e) {
            coordinateToAddress(e.latLng);
        })
    }
};
useEffect(initEventListener, [map]);
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Translating coordinate to an address&lt;/h3&gt;&lt;p&gt;As you notice, I invoke a function called &lt;code&gt;coordinateToAddress()&lt;/code&gt; whenever the user clicks somewhere on the map.
The click event of &lt;code&gt;google.maps&lt;/code&gt; namespace returns us a typical event (e), but this e event has a special attribute called latLng.
This is our location value. In this function, I pull three different data types from &lt;code&gt;geocoder&lt;/code&gt;. I get the address, latitute and longitude.
Just what I need to set my marker state.&lt;/p&gt;&lt;p&gt;At this point of the program, our Map component successfully retrieves the coordinates of clicked point and
it stores the data in our hook (marker), but we do not illustrate any marker to the user, yet.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;const coordinateToAddress = async (coordinate: GoogleLatLng) =&amp;gt; {
    const geocoder = new google.maps.Geocoder();
    await geocoder.geocode({ location: coordinate}, function (results, status) {
        if (status === &amp;#x27;OK&amp;#x27;) {
            setMarker({
                address: results[0].formatted_address,
                latitude: coordinate.lat(),
                longitude: coordinate.lng()
            })
        }
    });
};
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Adding single marker&lt;/h3&gt;&lt;p&gt;I created this function just for convenience. If we decide to create an array of IMarker objects
(which means storing several markers on the map at the same time), we would create another function called addMultipleMarkers.
But let’s see what &lt;code&gt;addSingleMarker()&lt;/code&gt; does first. It simply follows the changes on &lt;code&gt;marker&lt;/code&gt; hook with a &lt;code&gt;useEffect&lt;/code&gt; and
whenever it is updated we invoke &lt;code&gt;addMarker()&lt;/code&gt; function.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;const addSingleMarker = () =&amp;gt; {
   if (marker) {
       addMarker(new google.maps.LatLng(marker.latitude, marker.longitude));
   }
};
useEffect(addSingleMarker, [marker]);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So, here is a much more reusable function. This is actually the moment where our Map component will create the marker and it will show it to the user.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;const addMarker = (location: GoogleLatLng): void =&amp;gt; {
    const marker: GoogleMarker = new google.maps.Marker({
        position: location,
        map: map,
        icon: getIconAttributes(&amp;#x27;#000000&amp;#x27;)
    });
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;google.maps.Marker&lt;/code&gt; receives a JSON object where the &lt;a href=&quot;https://developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions&quot;&gt;options are almost limitless&lt;/a&gt;.
There are so many attributes that you can use to customise your marker, but I only used some fundamental parts here (position, map and icon).
I also created a dummy function called &lt;code&gt;getIconAttributes()&lt;/code&gt; which is only used for the output of icon.
You may refer to Google Maps manual for further customisation.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;const getIconAttributes = (iconColor: string) =&amp;gt; {
    return {
        path: &amp;#x27;M11.0639 15.3003L26.3642 2.47559e-05L41.6646 15.3003L26.3638 51.3639L11.0639 15.3003 M22,17.5a4.5,4.5 0 1,0 9,0a4.5,4.5 0 1,0 -9,0Z&amp;#x27;,
        fillColor: iconColor,
        fillOpacity: 0.8,
        strokeColor: &amp;#x27;pink&amp;#x27;,
        strokeWeight: 2,
        anchor: new google.maps.Point(30, 50)
    };
};
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Homework&lt;/h3&gt;&lt;p&gt;The gif animation below shows how I create markers on the map, but there is a problem.
As I click a point on the map, the component successfully creates a marker.
However, when I create once more, the previous marker is still there although the marker hook changed its value.
So, try to create a function which will remove the previous marker. Good luck!&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/assets/blog/google-maps-create-marker-example-typescript.gif&quot; alt=&quot;Create markers demo&quot;/&gt;&lt;/p&gt;&lt;p&gt;I hope you enjoyed the part two. Third video and tutorial will show you how to calculate distance between markers.&lt;/p&gt;&lt;p&gt;(This article was previously published on &lt;a href=&quot;https://storksnestblog.wordpress.com/2020/10/27/creating-markers-on-google-maps-with-react-typescript/&quot;&gt;Stork&amp;#x27;s Nest&lt;/a&gt;)&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Setting up Google Maps]]></title><description><![CDATA[Coding with Google Maps is a fun, mysterious and challenging journey. If you do it with Typescript, both joy and pain get doubled. When I was coding a Google Maps component for the first time, I was starving for a comprehensive tutorial on this topic.
Unfortunately, the results…]]></description><link>https://jokul.fremtind.no/blog/setup-google-maps/</link><guid isPermaLink="false">https://jokul.fremtind.no/blog/setup-google-maps/</guid><pubDate>Wed, 27 Oct 2021 00:00:00 GMT</pubDate><content:encoded>&lt;div&gt;Let&amp;#x27;s create a comprehensive project and deliver all the secrets of Google Maps + TypeScript + React? This is the first blog of Google Maps tutorial series with a course video.&lt;/div&gt;&lt;p&gt;Coding with Google Maps is a fun, mysterious and challenging journey. If you do it with Typescript, both joy and pain get doubled.&lt;/p&gt;&lt;p&gt;When I was coding a Google Maps component for the first time, I was starving for a comprehensive tutorial on this topic.
Unfortunately, the results were a bit disappointing, but like all developers I found a solution for each problem and the job was done.&lt;/p&gt;&lt;p&gt;On the other hand, a design system is not a single deliverable, but a collection of different services to create other applications.
However, this definition should not limit us with reusable components only. Jøkul&amp;#x27;s blog posts are also a part of the design system&amp;#x27;s deliverables.
Our team assessed the possibility of having a reusable Google Maps component among Jøkul&amp;#x27;s packages. After gaining enough experience and knowledge,
we decided not to take this path because Google Maps itself is a very large library and answering the demands of different parties did not seem feasible.
As a result of these, our team decided to support the users of Jøkul Design System with a comprehensive blog post series which will assist the consumers
with technical knowledge and best practices while developing their own Google Maps component.&lt;/p&gt;&lt;p&gt;So, while I was working on my map component, I discovered the answers to my questions via different websites. For example:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;How can I use TypeScript types from Google for my map project in React?&lt;/li&gt;&lt;li&gt;How should I load my Google Maps API script into my homepage? What could be the best practice?&lt;/li&gt;&lt;li&gt;Where should I use &lt;code&gt;useRef&lt;/code&gt; to point out my Google Maps DOM element?&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Some of the answers that I found were outdated, some people were not quite sure of what they were advising, etc… You know the drill.&lt;/p&gt;&lt;p&gt;As a result, I created a sample project on GitHub and decided to sail for a new adventure as well. For the first time, I screencast while coding. The video is 55 minutes long and you can see the whole process.&lt;/p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/fMsAPI7de0A&quot; title=&quot;YouTube video player&quot; frameBorder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;h3&gt;Setup and Installation&lt;/h3&gt;&lt;p&gt;To kick off the project, we need to create a react application with typescript flag. Use the sample command below to start with:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-npm&quot;&gt;npx create-react-app google-maps --template typescript
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After removing files like &lt;code&gt;logo.svg&lt;/code&gt; and &lt;code&gt;App.test.tsx&lt;/code&gt;, run the command below to install Google Maps TypeScript types. This will help you access types from the &lt;code&gt;google.maps&lt;/code&gt; namespace such as &lt;code&gt;google.maps.Map&lt;/code&gt;, &lt;code&gt;google.maps.LatLng&lt;/code&gt;, and so on.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-npm&quot;&gt;npm install --save-dev @types/googlemaps
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Bonus Hint: By doing so, you will also obtain &lt;code&gt;google.maps.places.AutocompletePrediction&lt;/code&gt; type which can be used to build an address dropdown component.&lt;/p&gt;&lt;p&gt;Now we are ready to give a shape to our React project. I set up the file and folder structure of my src folder as blueprinted below:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-Folder&quot;&gt;├── App.css
├── App.tsx
├── Map
   ├── Map.scss
   ├── Map.tsx
   └── index.ts
├── index.css
├── index.tsx
├── react-app-env.d.ts
└── utils
   └── GoogleMapsUtils.ts
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Loading the Google Maps library&lt;/h3&gt;&lt;p&gt;While developing a Google Maps component, we need to load the script tag which will download the API library for us. At the end, our web page should show something like this:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script
src=&amp;quot;https://maps.googleapis.com/maps/api/js?key=&amp;lt;YOUR_API_KEY&amp;gt;&amp;amp;libraries=places&amp;amp;language=no&amp;amp;region=NO&amp;amp;v=quarterly&amp;quot;
async defer&amp;gt;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Before loading this tag into our DOM structure, we cannot run Google Maps related code pieces. Therefore, we should create a utility function under &lt;code&gt;utils/GoogleMapsUtils.ts&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;export const loadMapApi = () =&amp;gt; {
    const mapsURL = `https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_MAPS_API_KEY}&amp;amp;libraries=geometry,places&amp;amp;language=no&amp;amp;region=NO&amp;amp;v=quarterly`;
    const scripts = document.getElementsByTagName(&amp;#x27;script&amp;#x27;);
    // Go through existing script tags, and return google maps api tag when found.
    for (let i = 0; i &amp;lt; scripts.length; i++) {
        if (scripts[i].src.indexOf(mapsURL) === 0) {
            return scripts[i];
        }
    }

    const googleMapScript = document.createElement(&amp;#x27;script&amp;#x27;);
    googleMapScript.src = mapsURL;
    googleMapScript.async = true;
    googleMapScript.defer = true;
    window.document.body.appendChild(googleMapScript);

    return googleMapScript;
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This function creates the aforementioned script tag and inserts it into the DOM if it is not found. &lt;code&gt;loadMapApi()&lt;/code&gt; will be used by the page which uses our Map component. In my example, this page will be the homepage of the project (&lt;code&gt;App.tsx&lt;/code&gt;).&lt;/p&gt;&lt;h3&gt;Making the app ready for maps&lt;/h3&gt;&lt;p&gt;In this application, we have two fundamental tasks for &lt;code&gt;App.tsx&lt;/code&gt;. The first is to load the map utility, and the second is to render our Map component. To do the first, I created the React hook below:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;const [scriptLoaded, setScriptLoaded] = useState(false);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This hook makes sure that Google Maps script tag is loaded successfully into the page. When scriptLoaded hook is set true we render the Map component.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;useEffect(() =&amp;gt; {
    const googleMapScript = loadMapApi();
    googleMapScript.addEventListener(&amp;#x27;load&amp;#x27;, function () {
        setScriptLoaded(true);
    });
}, []);
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;return (
    &amp;lt;div className=&amp;quot;App&amp;quot;&amp;gt;
        {scriptLoaded &amp;amp;&amp;amp; (
            &amp;lt;Map
              mapType={google.maps.MapTypeId.ROADMAP}
              mapTypeControl={true}
            /&amp;gt;
        )}
    &amp;lt;/div&amp;gt;
);
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Time to render the map&lt;/h3&gt;&lt;p&gt;We finally reached to the heart of the application. &lt;code&gt;Map.tsx&lt;/code&gt; is the component I mentioned earlier. Let’s create its interface (&lt;code&gt;IMap&lt;/code&gt;) first.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;interface IMap {
    mapType: google.maps.MapTypeId;
    mapTypeControl?: boolean;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I wanted to receive two basic props. mapType can have ROADMAP, SATELLITE, TERRAIN or HYBRID values. These are specific map types defined by Google.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/assets/blog/google.maps.MapTypeId.ROADMAP.png&quot; alt=&quot;Roadmap Example&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/assets/blog/google.maps.MapTypeId.SATELLITE.png&quot; alt=&quot;Satellite Example&quot;/&gt;&lt;/p&gt;&lt;p&gt;And we will use mapTypeControl prop to show/hide the control menu on the left-top corner of your map. We may extend the number of props to increase the usability of our map component, but I wanted to use only two props to illustrate my example.&lt;/p&gt;&lt;p&gt;I also use typescript’s custom type definition feature to increase the readability of my source code.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;type GoogleLatLng = google.maps.LatLng;
type GoogleMap = google.maps.Map;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Before I explain the &lt;code&gt;initMap&lt;/code&gt;, &lt;code&gt;defaultMapStart&lt;/code&gt;, and &lt;code&gt;startMap&lt;/code&gt; functions, I would like to show you the render part of the Map component.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;const ref = useRef&amp;lt;HTMLDivElement&amp;gt;(null);

return (
    &amp;lt;div className=&amp;quot;map-container&amp;quot;&amp;gt;
        &amp;lt;div ref={ref} className=&amp;quot;map-container__map&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The inner div element is the reference point for Google Maps. The API will load my map content into this div element and I use the outer div just for styling purposes. On the other hand, the same ref value is used by &lt;code&gt;initMap&lt;/code&gt; function where the map is triggered.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;const initMap = (zoomLevel: number, address: GoogleLatLng): void =&amp;gt; {
    if (ref.current) {
        setMap(
            new google.maps.Map(ref.current, {
                zoom: zoomLevel,
                center: address,
                mapTypeControl: mapTypeControl,
                streetViewControl: false,
                rotateControl: false,
                scaleControl: true,
                fullscreenControl: false,
                panControl: false,
                zoomControl: true,
                gestureHandling: &amp;#x27;cooperative&amp;#x27;,
                mapTypeId: mapType,
                draggableCursor: &amp;#x27;pointer&amp;#x27;,
            })
        );
    }
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you see above, before implementing the initMap function, I created a hook called &lt;code&gt;map&lt;/code&gt;. This hook is used to keep the map object created by google.maps.Map(…) function. The same function takes our div element via ref.current as its first parameter and the second parameter is a json object which keeps the preferences of our map.&lt;/p&gt;&lt;p&gt;&lt;code&gt;initMap&lt;/code&gt; receives two inputs: &lt;code&gt;zoomLevel&lt;/code&gt; and &lt;code&gt;address&lt;/code&gt;. zoomLevel is straightforward to understand, but what address does will be more clear when we take a look at &lt;code&gt;defaultMapStart()&lt;/code&gt; function.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;const defaultMapStart = (): void =&amp;gt; {
    const defaultAddress = new google.maps.LatLng(65.166013499, 13.3698147);
    initMap(4, defaultAddress);
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So, this function basically calls the &lt;code&gt;initMap&lt;/code&gt;, but it also does some critical work as well. It decides where to focus and how much to focus when our map starts.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;const startMap = (): void =&amp;gt; {
    if (!map) {
        defaultMapStart();
    }
};
useEffect(startMap, [map]);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Finally, &lt;code&gt;startMap&lt;/code&gt; function calls &lt;code&gt;defaultMapStart()&lt;/code&gt; when the map hook is not null anymore. This check is necessary because of rendering delays and typescript will complain if you do not run this check.&lt;/p&gt;&lt;h3&gt;Conclusion&lt;/h3&gt;&lt;p&gt;This application may not seem so impressive in terms of functionality, but you see that we had to do a lot of things just to start our map. While shooting the video, I had a problem with the API key because I did not want to screencast it via my youtube video, but when I include it, the output is as shown below:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/assets/blog/google.maps.MapTypeId.ROADMAP.png&quot; alt=&quot;Roadmap Example&quot;/&gt;&lt;/p&gt;&lt;p&gt;See you on the next tutorial/video where I will show how to add/remove markers on Google Maps. I hope you enjoyed this tutorial 🙂&lt;/p&gt;&lt;br/&gt;&lt;p&gt;(This article was previously published on &lt;a href=&quot;https://storksnestblog.wordpress.com/2020/08/16/setting-up-google-maps-with-react-typescript/&quot;&gt;Stork&amp;#x27;s Nest&lt;/a&gt;)&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Smarte tips til refaktorering av spacing]]></title><description><![CDATA[Det er et par ting som bør gjøres når du tar i bruk den nye spacing-skalaen. For det første må du bytte om til de nye navnene både der du har brukt hjelpeklasser og der du har brukt variablene i Sass. I tillegg bør du sørge for å importere Sass-variablene fra  @fremtind/jkl-core…]]></description><link>https://jokul.fremtind.no/blog/migrer-spacing/</link><guid isPermaLink="false">https://jokul.fremtind.no/blog/migrer-spacing/</guid><pubDate>Tue, 26 Oct 2021 00:00:00 GMT</pubDate><content:encoded>&lt;div&gt;Etter at vi har gjort om spacing-skalaen i Jøkul er det kanskje mange som har en stor refaktoreringsjobb foran seg. Her er noen tips som kan gjøre den litt lettere!&lt;/div&gt;&lt;p&gt;Det er et par ting som bør gjøres når du tar i bruk den nye spacing-skalaen. For det første må du bytte om til de nye navnene både der du har brukt hjelpeklasser og der du har brukt variablene i Sass. I tillegg bør du sørge for å importere Sass-variablene fra &lt;code&gt;@fremtind/jkl-core/jkl&lt;/code&gt;. Med litt smart bruk av regex og søk-og-erstatt kan vi få til dette litt enklere enn man skulle tro.&lt;/p&gt;&lt;p&gt;Siden vi har endret navngivingen i skalaen kan man ikke bruke &lt;em&gt;ett&lt;/em&gt; magisk regex-uttrykk for å refaktorere til de nye verdiene, men ved å ta et par små mellomsteg kan vi i hvert fall redusere det manuelle arbeidet ganske mye.&lt;/p&gt;&lt;h2&gt;1. Hjelpeklassene&lt;/h2&gt;&lt;p&gt;De gamle hjelpelklassene var på formen &lt;code&gt;jkl-&amp;lt;type&amp;gt;-spacing--&amp;lt;steg&amp;gt;-&amp;lt;posisjon&amp;gt;&lt;/code&gt;, der &lt;strong&gt;type&lt;/strong&gt; er &lt;code&gt;layout&lt;/code&gt; eller &lt;code&gt;component&lt;/code&gt;, &lt;strong&gt;steg&lt;/strong&gt; er steget i den gamle skalaen (f.eks. &lt;code&gt;large&lt;/code&gt;), og &lt;strong&gt;posisjon&lt;/strong&gt; er &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;, &lt;code&gt;bottom&lt;/code&gt;, &lt;code&gt;left&lt;/code&gt; eller &lt;code&gt;all&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;De nye klassene er på formen &lt;code&gt;jkl-spacing-&amp;lt;steg&amp;gt;--&amp;lt;posisjon&amp;gt;&lt;/code&gt;, der &lt;strong&gt;steg&lt;/strong&gt; er et steg i den nye skalaen &lt;strong&gt;posisjon&lt;/strong&gt; er det samme som i de gamle klassene. Med en regex søk-og-erstatt kan vi gjøre om fra det gamle til det nye formatet, men med steg og type fra den gamle skalaen. Da er vi klare for senere å oversette verdiene fra gammel til ny skala.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Vi søker etter &lt;code&gt;jkl-(component|layout)-spacing--(\w+)-(\w+)&lt;/code&gt;, og får da ut grupper for type, steg og posisjon. Disse kan vi sette inn i det nye formatet, f.eks. slik: &lt;code&gt;jkl-spacing-&amp;lt;$1-$2&amp;gt;--$3&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Det finnes også en enda eldre skala med tall, som kun omfatter layout-spacing. Vi gjør om den på tilsvarende måte med søk &lt;code&gt;jkl-spacing--(\w+)-(\d)&lt;/code&gt; og erstatt &lt;code&gt;jkl-spacing-&amp;lt;tall-layout-$2&amp;gt;--$1&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;2. Variablene&lt;/h2&gt;&lt;p&gt;Variablene har ingen varianter for posisjon, så her blir regexen hakket enklere! Vi gjør om både den gamle og den eldgamle skalaen her også, til det samme formatet som vi brukte for hjelpeklassene.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;For den gamle skalaen bruker du søk &lt;code&gt;\$(component|layout)-spacing--(\w+)&lt;/code&gt; og erstatt &lt;code&gt;$spacing-&amp;lt;$1-$2&amp;gt;&lt;/code&gt;&lt;/li&gt;&lt;li&gt;For den enda eldre skalaen med tall (som her omfatter &amp;quot;hele&amp;quot; skalaen) bruker du søk &lt;code&gt;$spacing-(\d)&lt;/code&gt; og erstatt &lt;code&gt;$spacing-&amp;lt;tall-komplett-$1&amp;gt;&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;3. Oversettingen&lt;/h2&gt;&lt;p&gt;Nå har du fått både hjelpeklasser og variabler over i samme format, så det er på tide å faktisk oversette verdiene. Du må fortsatt gå gjennom verdiene en og en, men siden vi har fikset formatet holder det med &lt;em&gt;erstatt alle&lt;/em&gt; én gang per skala og verdi!&lt;/p&gt;&lt;p&gt;Ta utgangspunkt i &lt;a href=&quot;https://github.com/fremtind/jokul/blob/main/packages/core/MIGRATION.md#variabler-i-spacingskalaen&quot;&gt;tabellene i migrasjonsguiden&lt;/a&gt;, og erstatt verdiene på følgende måte (ingen regex nødvendig!):&lt;/p&gt;&lt;ul&gt;&lt;li&gt;For komponent-/og layoutskala søk &lt;code&gt;&amp;lt;component-xxs&amp;gt;&lt;/code&gt; og erstatt &lt;code&gt;3xs&lt;/code&gt;. Gjør tilsvarende med alle steg i tabellene for både layout- og komponentskalaene.&lt;/li&gt;&lt;li&gt;For den komplette tallskalaen søk &lt;code&gt;&amp;lt;tall-komplett-1&amp;gt;&lt;/code&gt; og erstatt &lt;code&gt;3xs&lt;/code&gt;. Gjør tilsvarende for alle tallene i skalaen.&lt;/li&gt;&lt;li&gt;For tall-layoutskalaen søk &lt;code&gt;&amp;lt;tall-layout-1&amp;gt;&lt;/code&gt; og erstatt &lt;code&gt;l&lt;/code&gt;. Gjør tilsvarende for resten av tallene i skalaen.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Gratulerer! Du har nå oversatt alle gamle varianter av spacing med de nyeste! 🎉&lt;/p&gt;&lt;h2&gt;4. Importene&lt;/h2&gt;&lt;p&gt;Dette steget er foreløpig strengt tatt valgfritt, men vi anbefaler alle å gå over til den nye importen av Jøkul-variablene i Sass ved hjelp av &lt;code&gt;@use&lt;/code&gt;. NB! Dette krever at man bruker nyeste versjon av Sass i prosjektet sitt, noe vi også anbefaler at man gjør.&lt;/p&gt;&lt;p&gt;Her har vi dessverre ingen magisk regex, siden det vil kunne variere fra prosjekt til prosjekt, men man ønsker å endre importen til &lt;code&gt;@use &amp;#x27;~@fremtind/jkl-core/jkl&amp;#x27;;&lt;/code&gt; og prefikse alle variablene med &lt;code&gt;jkl&lt;/code&gt;. Dette lar seg også i stor grad løse med søk-og-erstatt, du vet best hva du må lete etter i ditt prosjekt!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Tabeller i 2021]]></title><description><![CDATA[Mye større fleksibilitet Det vi raskt oppdaget var at tabellkomponenten i Jøkul ikke lett lot seg tilpasse til de mange ulike behovene der ute. Det håper vi de nye komponentene kan rette opp i. Nytt fra i dag er at Jøkul tilbyr enkeltkomponenter tilsvarende de du finner i HTML…]]></description><link>https://jokul.fremtind.no/blog/tabeller/tabeller-i-2021/</link><guid isPermaLink="false">https://jokul.fremtind.no/blog/tabeller/tabeller-i-2021/</guid><pubDate>Mon, 25 Oct 2021 00:00:00 GMT</pubDate><content:encoded>&lt;div&gt;Under en avstemming på &lt;a class=&quot;jkl-link jkl-link--external&quot; href=&quot;https://github.com/fremtind/jokul/discussions?discussions_q=label%3A%22🔍+inventory%22+sort%3Atop&quot;&gt;GitHub&lt;/a&gt; tidligere i høst ble det tydelig at tabellene i Jøkul trengte litt kjærleik. Første versjon av de nye tabellene er laget, og her er hvordan du kan bruke dem.&lt;/div&gt;&lt;h2&gt;Mye større fleksibilitet&lt;/h2&gt;&lt;p&gt;Det vi raskt oppdaget var at tabellkomponenten i Jøkul ikke lett lot seg tilpasse til de mange ulike behovene der ute. Det håper vi de nye komponentene kan rette opp i.&lt;/p&gt;&lt;p&gt;Nytt fra i dag er at Jøkul tilbyr enkeltkomponenter tilsvarende de du finner i HTML. Hvert tabell-element har sin egen Jøkul-motpart du kan ta i bruk:&lt;/p&gt;&lt;table class=&quot;jkl-layout-spacing--medium-top jkl-layout-spacing--large-bottom&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;HTML&lt;/th&gt;&lt;th&gt;Jøkul&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table&quot; class=&quot;jkl-link jkl-link--external&quot;&gt;&lt;code&gt;&amp;lt;table /&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;&amp;lt;Table /&amp;gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/thead&quot; class=&quot;jkl-link jkl-link--external&quot;&gt;&lt;code&gt;&amp;lt;thead /&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;&amp;lt;TableHead /&amp;gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody&quot; class=&quot;jkl-link jkl-link--external&quot;&gt;&lt;code&gt;&amp;lt;tbody /&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;&amp;lt;TableBody /&amp;gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tfoot&quot; class=&quot;jkl-link jkl-link--external&quot;&gt;&lt;code&gt;&amp;lt;tfoot /&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;&amp;lt;TableFooter /&amp;gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tr&quot; class=&quot;jkl-link jkl-link--external&quot;&gt;&lt;code&gt;&amp;lt;tr /&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;&amp;lt;TableRow /&amp;gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th&quot; class=&quot;jkl-link jkl-link--external&quot;&gt;&lt;code&gt;&amp;lt;th /&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;&amp;lt;TableHeader /&amp;gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td&quot; class=&quot;jkl-link jkl-link--external&quot;&gt;&lt;code&gt;&amp;lt;td /&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;&amp;lt;TableCell /&amp;gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption&quot; class=&quot;jkl-link jkl-link--external&quot;&gt;&lt;code&gt;&amp;lt;caption /&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;&amp;lt;TableCaption /&amp;gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup&quot; class=&quot;jkl-link jkl-link--external&quot;&gt;&lt;code&gt;&amp;lt;colgroup /&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;&amp;lt;TableColumnGroup /&amp;gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col&quot; class=&quot;jkl-link jkl-link--external&quot;&gt;&lt;code&gt;&amp;lt;col /&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;&amp;lt;TableColumn /&amp;gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;Merk at ikke alle elementene har noen eksplisitt CSS fra Jøkul i dag, men vi anbefaler å bruke
Jøkul-komponentene framfor HTML for å være sikret å få med riktig styling om det skulle komme
senere. Det å unngå blanding i koden gir også bedre &lt;em&gt;aesthetics&lt;/em&gt; 😉 💅&lt;/p&gt;&lt;h2&gt;Eksempler på bruk&lt;/h2&gt;&lt;p&gt;Gjennom intervjuer og demoer fikk vi se flere av behovene til Jøkul-brukere som
vi var nødt til å støtte. Vi har samlet dokumentasjon på flere typer tabeller i
tillegg til den vanlige datatabellen:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Rader med knapper&lt;/li&gt;&lt;li&gt;Klikkbare rader&lt;/li&gt;&lt;li&gt;Responsive tabeller i to varianter&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Les igjennom &lt;a href=&quot;/preview/feat/stempelvarianter/komponenter/table#eksempler-p%C3%A5-bruk&quot;&gt;dokumentasjonen for tabellkomponentene&lt;/a&gt; for å se hvordan du kan lage disse tabellene.&lt;/p&gt;&lt;h2&gt;Migrering til nye komponenter&lt;/h2&gt;&lt;p&gt;Om du er en av de som brukte den gamle tabellen fra Jøkul har vi fremdeles en variant som fungerer omtrent likt.&lt;/p&gt;&lt;div title=&quot;DataTable&quot; knobs=&quot;[object Object]&quot;&gt;&lt;/div&gt;&lt;p&gt;Vi har &lt;a href=&quot;https://github.com/fremtind/jokul/blob/main/packages/table-react/MIGRATION.md&quot;&gt;fjernet muligheten for å merke rader som klikkbare&lt;/a&gt; i denne komponenten. Om du trenger det kan du se på &lt;a href=&quot;/preview/feat/stempelvarianter/komponenter/table#eksempler-p%C3%A5-bruk&quot;&gt;eksempler på bruk&lt;/a&gt; for de nye komponentene.&lt;/p&gt;&lt;h2&gt;Hva trenger du?&lt;/h2&gt;&lt;p&gt;Er det en variant vi har glemt? Er det noe du savner fra dokumentasjonen?
Fortsett gjerne &lt;a href=&quot;https://github.com/fremtind/jokul/discussions/2333&quot;&gt;tabelldiskusjonen på GitHub&lt;/a&gt;
og fortell oss mer om hva du trenger.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Bye, bye Internet Explorer]]></title><description><![CDATA[Oppdatert 2021.11.11:  IE-støtte droppes i Jøkul . Med mindre du har levd under en stein har du sikkert fått med deg at  støtte for IE sakte men sikkert forsvinner .
Edge har vært basert på Chromium fra mars 2021 så derfor kan du også legge inn en melding om dette. Teamene må…]]></description><link>https://jokul.fremtind.no/blog/bye-ie/</link><guid isPermaLink="false">https://jokul.fremtind.no/blog/bye-ie/</guid><pubDate>Wed, 20 Oct 2021 00:00:00 GMT</pubDate><content:encoded>&lt;div&gt;Internet Explorer (IE) har vært med oss i mange år, men nå kan vi endelig si ha det bra! I denne artikkelen vil jeg komme med et forslag til en implementasjon av en sperre du kan bruke i din applikasjon slik at vi kan fjerne støtten i Jøkul.&lt;/div&gt;&lt;ul&gt;&lt;li&gt;Oppdatert 2021.11.11: &lt;a href=&quot;/preview/feat/stempelvarianter/blog/jokul-dropper-ie-stotte/&quot;&gt;IE-støtte droppes i Jøkul&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Med mindre du har levd under en stein har du sikkert fått med deg at &lt;a href=&quot;https://techcommunity.microsoft.com/t5/microsoft-365-blog/microsoft-365-apps-say-farewell-to-internet-explorer-11-and/ba-p/1591666&quot;&gt;støtte for IE sakte men sikkert forsvinner&lt;/a&gt;.
Edge har vært basert på Chromium fra mars 2021 så derfor kan du også legge inn en melding om dette. Teamene må selv bestemme hva de ønsker å gjøre med Edge, men vi anbefaler alle å legge inn melding om IE. Meldingen for IE vil bli seende slik ut:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/assets/blog/bye-ie.png&quot; alt=&quot;Bilde av IE-sperre&quot;/&gt;&lt;/p&gt;&lt;p&gt;Microsoft &lt;a href=&quot;https://docs.microsoft.com/en-us/microsoft-edge/web-platform/ie-to-microsoft-edge-redirection&quot;&gt;tilbyr funksjonalitet&lt;/a&gt; for automatisk videresending av brukere fra IE til Edge dersom nettstedet er registrert hos Microsoft som inkompatibelt med IE.
Vi i kundeklienter for privatmarkedet har tatt dette i bruk, men det ser av en eller annen grunn ikke ut som det fungerer. Du kan søke om å komme med på den listen, men jeg kan ikke love at det fungerer bra.&lt;/p&gt;&lt;p&gt;Under kan du se implementasjonen av begge sperrene. Ta gjerne kontakt med meg dersom det er noe du lurer på, så skal jeg prøve å hjelpe :) Jeg kan også sende deg logo av typen SVG av Chrome, Firefox, Edge og Fremtind dersom du trenger det.&lt;/p&gt;&lt;h2&gt;Oppskrift&lt;/h2&gt;&lt;p&gt;Først legger du inn referanse til CSS- og JS-filene som en del av &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; i &lt;code&gt;index_template.html&lt;/code&gt; eller tilsvarende:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;html lang=&amp;quot;no&amp;quot;&amp;gt;
    &amp;lt;head&amp;gt;
        {...}

        &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;/styles/ie-melding.css&amp;quot; /&amp;gt;
        &amp;lt;script src=&amp;quot;/scripts/ie-melding.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;div id=&amp;quot;root&amp;quot; class=&amp;quot;jkl root-container&amp;quot;&amp;gt;{...}&amp;lt;/div&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Og så oppretter du en JS-fil som heter &lt;code&gt;ie-melding.js&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const isIe = window.navigator.userAgent.match(/(MSIE|Trident)/);

const ieMelding = `
    &amp;lt;header&amp;gt;
        &amp;lt;img alt=&amp;quot;&amp;quot; src=&amp;quot;/images/fremtind.svg&amp;quot; /&amp;gt;
    &amp;lt;/header&amp;gt;
    &amp;lt;main&amp;gt;
        &amp;lt;h1
            class=&amp;quot;jkl-title-small title-text&amp;quot;
        &amp;gt;
            Vennligst benytt en annen nettleser
        &amp;lt;/h1&amp;gt;
        &amp;lt;p class=&amp;quot;jkl-lead lead-text&amp;quot;&amp;gt;
            Denne løsningen støtter ikke lenger Internet Explorer av hensyn til sikkerhet.
            Hvis du ikke har en annen nettleser installert, kan du laste ned en av disse:
        &amp;lt;/p&amp;gt;
        &amp;lt;ul class=&amp;quot;browser-list&amp;quot;&amp;gt;
            &amp;lt;li class=&amp;quot;browser-list__item&amp;quot;&amp;gt;
                &amp;lt;a href=&amp;quot;https://www.google.com/chrome/&amp;quot; title=&amp;quot;Google Chrome&amp;quot;&amp;gt;
                    &amp;lt;img alt=&amp;quot;&amp;quot; src=&amp;quot;/images/chrome.svg&amp;quot; /&amp;gt;
                    &amp;lt;span class=&amp;quot;jkl-link&amp;quot;&amp;gt;Google Chrome&amp;lt;/span&amp;gt;
                &amp;lt;/a&amp;gt;
            &amp;lt;/li&amp;gt;
            &amp;lt;li class=&amp;quot;browser-list__item&amp;quot;&amp;gt;
                &amp;lt;a href=&amp;quot;https://www.mozilla.org/firefox/new/&amp;quot; title=&amp;quot;Mozilla Firefox&amp;quot;&amp;gt;
                    &amp;lt;img alt=&amp;quot;&amp;quot; src=&amp;quot;/images/firefox.svg&amp;quot; /&amp;gt;
                    &amp;lt;span class=&amp;quot;jkl-link&amp;quot;&amp;gt;Mozilla Firefox&amp;lt;/span&amp;gt;
                &amp;lt;/a&amp;gt;
            &amp;lt;/li&amp;gt;
            &amp;lt;li class=&amp;quot;browser-list__item&amp;quot;&amp;gt;
                &amp;lt;a href=&amp;quot;https://www.microsoft.com/nb-no/edge/&amp;quot; class=&amp;quot;Microsoft Edge&amp;quot;&amp;gt;
                    &amp;lt;img alt=&amp;quot;&amp;quot; src=&amp;quot;/images/edge.svg&amp;quot; /&amp;gt;
                    &amp;lt;span class=&amp;quot;jkl-link&amp;quot;&amp;gt;Microsoft Edge&amp;lt;/span&amp;gt;
                &amp;lt;/a&amp;gt;
            &amp;lt;/li&amp;gt;
        &amp;lt;/ul&amp;gt;
    &amp;lt;/main&amp;gt;
    &amp;lt;footer&amp;gt;
        &amp;lt;a
            target=&amp;quot;_blank&amp;quot;
            href=&amp;quot;https://kundeforsikring.sparebank1.no/privat/forsikring/open/selskapsinformasjon&amp;quot;
            class=&amp;quot;jkl-link jkl-link--negative jkl-desktop-small footer-link&amp;quot;
            &amp;gt;© Fremtind Forsikring&amp;lt;/a
        &amp;gt;
        &amp;lt;a
            target=&amp;quot;_blank&amp;quot;
            href=&amp;quot;https://www.fremtind.no/personvern/&amp;quot;
            class=&amp;quot;jkl-link jkl-link--negative jkl-desktop-small footer-link&amp;quot;
            &amp;gt;Personvern og vilkår for bruk av nettsiden&amp;lt;/a
        &amp;gt;
    &amp;lt;/footer&amp;gt;
`;

const isOldEdge = window.navigator.userAgent.toLowerCase().indexOf(&amp;quot;edge&amp;quot;) &amp;gt; -1; // old MS edge

const oldEdgeMelding = `
    &amp;lt;header&amp;gt;
        &amp;lt;img alt=&amp;quot;&amp;quot; src=&amp;quot;/images/fremtind.svg&amp;quot; /&amp;gt;
    &amp;lt;/header&amp;gt;
    &amp;lt;main&amp;gt;
        &amp;lt;h1 class=&amp;quot;jkl-title-small title-text&amp;quot;&amp;gt;
            Vi ser at du bruker en utdatert nettleser
        &amp;lt;/h1&amp;gt;
        &amp;lt;p class=&amp;quot;jkl-lead lead-text&amp;quot;&amp;gt;
            Nettleseren er dataprogrammet du bruker når du besøker denne siden. Du bruker en
            versjon av nettleseren Edge som er utdatert, og ikke lenger anses å være sikker. Denne siden vil derfor
            ikke fungere i denne nettleseren. Vi anbefaler at du oppdaterer den eller bytter til en annen, som
            Google Chrome eller Mozilla Firefox. Du kan laste ned siste versjon av disse nettleserne her:
        &amp;lt;/p&amp;gt;
        &amp;lt;ul class=&amp;quot;browser-list&amp;quot;&amp;gt;
            &amp;lt;li class=&amp;quot;browser-list__item&amp;quot;&amp;gt;
                &amp;lt;a href=&amp;quot;https://www.microsoft.com/nb-no/edge/&amp;quot; class=&amp;quot;Microsoft Edge&amp;quot;&amp;gt;
                    &amp;lt;img alt=&amp;quot;&amp;quot; src=&amp;quot;/images/edge.svg&amp;quot; /&amp;gt;
                    &amp;lt;span class=&amp;quot;jkl-link&amp;quot;&amp;gt;Microsoft Edge&amp;lt;/span&amp;gt;
                &amp;lt;/a&amp;gt;
            &amp;lt;/li&amp;gt;
            &amp;lt;li class=&amp;quot;browser-list__item&amp;quot;&amp;gt;
                &amp;lt;a href=&amp;quot;https://www.google.com/chrome/&amp;quot; title=&amp;quot;Google Chrome&amp;quot;&amp;gt;
                    &amp;lt;img alt=&amp;quot;&amp;quot; src=&amp;quot;/images/chrome.svg&amp;quot; /&amp;gt;
                    &amp;lt;span class=&amp;quot;jkl-link&amp;quot;&amp;gt;Google Chrome&amp;lt;/span&amp;gt;
                &amp;lt;/a&amp;gt;
            &amp;lt;/li&amp;gt;
            &amp;lt;li class=&amp;quot;browser-list__item&amp;quot;&amp;gt;
                &amp;lt;a href=&amp;quot;https://www.mozilla.org/firefox/new/&amp;quot; title=&amp;quot;Mozilla Firefox&amp;quot;&amp;gt;
                    &amp;lt;img alt=&amp;quot;&amp;quot; src=&amp;quot;/images/firefox.svg&amp;quot; /&amp;gt;
                    &amp;lt;span class=&amp;quot;jkl-link&amp;quot;&amp;gt;Mozilla Firefox&amp;lt;/span&amp;gt;
                &amp;lt;/a&amp;gt;
            &amp;lt;/li&amp;gt;
        &amp;lt;/ul&amp;gt;
    &amp;lt;/main&amp;gt;

`;

const callback = function () {
    if (isIe || isOldEdge) {
        const appRoot = document.getElementById(&amp;quot;root&amp;quot;);
        appRoot.classList.add(&amp;quot;hide-app&amp;quot;);

        const ieRoot = document.getElementById(&amp;quot;ie-melding&amp;quot;);
        if (isIe) {
            ieRoot.innerHTML += ieMelding;
        }
        if (isOldEdge) {
            ieRoot.innerHTML += oldEdgeMelding;
        }
        ieRoot.classList.add(&amp;quot;vis-ie&amp;quot;);
    }
};

if (document.readyState === &amp;quot;complete&amp;quot; || (document.readyState !== &amp;quot;loading&amp;quot; &amp;amp;&amp;amp; !document.documentElement.doScroll)) {
    callback();
} else {
    document.addEventListener(&amp;quot;DOMContentLoaded&amp;quot;, callback);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;og en CSS fil som heter &lt;code&gt;ie-melding.css&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;body {
    margin: 0;
}

#root.hide-app {
    display: none !important;
}

#ie-melding {
    height: 100vh;
    flex-direction: column;
}

#ie-melding.vis-ie {
    display: flex !important;
}

#ie-melding header {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 81px;
}

#ie-melding.ie-melding--dnb header,
#ie-melding.ie-melding--sb1 header {
    border-bottom: 1px solid #b8b8b8;
}

#ie-melding main {
    flex: 1 1 auto;
    -ms-flex: 1 1 auto;
    max-width: 92ch;
    min-height: 500px;
    padding-left: 104px;
}

#ie-melding footer {
    background-color: black;
    min-height: 152px;
    display: flex;
    justify-content: center;
    align-items: center;
}

#ie-melding footer .footer-link {
    margin-right: 24px;
    color: white;
}

#ie-melding .title-text {
    padding-bottom: 24px;
    padding-top: 64px;
}

#ie-melding .lead-text {
    padding-bottom: 40px;
}

#ie-melding .browser-list {
    padding-inline-start: 0;
    display: flex;
    list-style: none;
    width: 100%;
}

#ie-melding .browser-list__item {
    padding-right: 64px;
}

#ie-melding .browser-list__item a {
    display: flex;
    flex-direction: column;
    align-items: center;
    color: inherit;
    text-decoration: inherit;
}

#ie-melding .browser-list__item img {
    height: 80px;
    width: 80px;
    margin-bottom: 21px;
}
&lt;/code&gt;&lt;/pre&gt;</content:encoded></item><item><title><![CDATA[Å peke, eller ikke peke]]></title><description><![CDATA[Om du trykker rundt i operativsystemet på datamaskinen din vil du se at når du fører musepekeren over en ting er det veldig sjelden du får en egen musepeker. Dette er stort sett forbeholdt linker, og sånn har det vært ment helt siden vi først så den spesielle pekeren i  Apple…]]></description><link>https://jokul.fremtind.no/blog/cursor-pointer/</link><guid isPermaLink="false">https://jokul.fremtind.no/blog/cursor-pointer/</guid><pubDate>Tue, 28 Sep 2021 00:00:00 GMT</pubDate><content:encoded>&lt;div&gt;Operativsystemer og nettleserstandarder sier at det kun er linker som skal ha en egen musepeker, men likevel har normen på internett blitt at alle klikkbare elemenenter har det. Hvordan angriper man en sånn problemstilling for å ta et konsekvent valg?&lt;/div&gt;&lt;p&gt;Om du trykker rundt i operativsystemet på datamaskinen din vil du se at når du fører musepekeren over en ting er det veldig sjelden du får en egen musepeker. Dette er stort sett forbeholdt linker, og sånn har det vært ment helt siden vi først så den spesielle pekeren i &lt;a href=&quot;https://adamsilver.io/blog/buttons-shouldnt-have-a-hand-cursor-part-2/&quot;&gt;Apple sitt HyperCard i 1987&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;I designretningslinjenene til de forskjellige operativsystemene kan vi lese at en &lt;a href=&quot;https://www.w3.org/TR/CSS21/ui.html#propdef-cursor&quot;&gt;musepeker av typen &amp;quot;pointer&amp;quot; indikerer en link&lt;/a&gt;.
Det samme ser vi på et ustilet HTML-element: Hverken knapper eller select har en egen musepeker ved hover som standard.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Men om vi ser på web er saken en helt annen.&lt;/strong&gt; Her har knapper, lenker, selects og andre klikkbare elementer mer eller mindre konsekvent en egen peker.
Både på større og mindre nettsteder ser man dette, også i designsystemer som &lt;a href=&quot;https://www.carbondesignsystem.com/components/select/usage/&quot;&gt;Carbon&lt;/a&gt; og &lt;a href=&quot;https://mui.com/components/buttons/&quot;&gt;Material You&lt;/a&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;button {
    pointer: cursor;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Hvorfor det har blitt sånn er vanskelig å si. Kanskje det kommer fra en misforståelse om at klikkbare elementer skal ha en egen peker, eller kanskje man bare har fortsatt med det fordi &amp;quot;alle andre gjør det&amp;quot;. Kanskje har det sneket seg inn gjennom tredjeparts biblioteker.&lt;/p&gt;&lt;p&gt;Selv er dette noe vi har gjort mindre bevisst. Før denne problemstillingen ble tatt opp kunne man se at for eksempel knapper allerede hadde egen musepeker ved hover.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;I Jøkul har vi nå tatt en avgjørelse om konsekvent å følge normen:&lt;/strong&gt; Etter å ha snakket om temaet i Designsystemforumet gjorde vi en avstemning på hva designere og utviklere mente om det. Noen mente at vi burde ta et sterkt standpunkt å bidra til å redde internett fra denne utingen. Andre mente at vi burde sikre at klikkbare elementer oppførte seg på en måte som er kjent for brukeren.&lt;/p&gt;&lt;p&gt;Med et flertall for konsekvent å bruke egen peker på klikkbare elementer har vi satt brukeren i fokus, og ved å gi en klar forventing om hvordan klikkbare elementer oppfører seg unngår man forvirring.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Kultur for designsystem]]></title><description><![CDATA[Ideen hadde vokst frem gjennom en samling av læring fra inspirerende folk og tekniske fremskritt iblandet en god dose frustrasjon over fragmenterte designimplementasjoner, treg time-to-market, unødvendig lav UX-kvalitet og gjentagende problemstillinger. En av disse mange…]]></description><link>https://jokul.fremtind.no/blog/kulturForDesignsystem/kulturForDesignsystem/</link><guid isPermaLink="false">https://jokul.fremtind.no/blog/kulturForDesignsystem/kulturForDesignsystem/</guid><pubDate>Tue, 03 Aug 2021 00:00:00 GMT</pubDate><content:encoded>&lt;div&gt;Sommeren 2015 begynte en liten gruppe utviklere og en designer å gå fra team til team i SpareBank 1-universet for å fortelle om en idé vi jobbet med. En idé som med tiden har vokst til en kultur.&lt;/div&gt;&lt;p&gt;Ideen hadde vokst frem gjennom en samling av læring fra inspirerende folk og tekniske fremskritt iblandet en god dose frustrasjon over fragmenterte designimplementasjoner, treg time-to-market, unødvendig lav UX-kvalitet og gjentagende problemstillinger.&lt;/p&gt;&lt;p&gt;En av disse mange inspirerende folkene hadde jeg truffet høsten 2014 på en CSS-konferanse i New Orleans. En utvikler fra CBC holdt et &lt;a href=&quot;https://www.slideshare.net/JamieStrachan/oocss-in-the-real-world-revisited&quot;&gt;foredrag om objektorientert CSS&lt;/a&gt; og forklarte noe så enkelt som at de hadde begynt å spørre designere hva de kalte de forskjellige visuelle delene av webløsningen de designet. Dette hjalp utviklerne å navngi komponentene de kodet.&lt;/p&gt;&lt;p&gt;I et rolig hjørne av det historiske Hotel Monteleone startet en diskusjon: Hvordan ville verden vært om designere og utviklere kunne jobbe tettere sammen og til og med snakke samme språk? Kunne en designer raskt påvirke brukeropplevelsen i hele den implementerte profilen på en trygg og versjonerbar måte? Kunne man lage gjenbrukbare UX-standarder for alle som utformet webløsninger innen samme merkevare?&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/assets/blog/kultur/hotel-monteleone.jpg&quot; alt=&quot;Hotel Monteleone takskilt&quot;/&gt;&lt;/p&gt;&lt;h2&gt;En smartere måte&lt;/h2&gt;&lt;p&gt;Vel hjemme igjen foredlet ideen seg gjennom mange levende samtaler og diskusjoner med andre inspirerte. Sammen forsøkte vi å overbevise andre utviklere og designere i SpareBank 1 om at vi kunne jobbe på en smartere måte, til stor fordel for både brukerne og oss. Etter hvert begynte andre i industrien å kalle disse prinsippene for “designsystem” og vi oppdaget dermed en enda større gruppe likesinnede som jobbet med lignende ideer. Vi hadde fått nok engasjerte mennesker og nok vilje til å lage et designsystem som teamene både kunne og ønsket å bruke.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;I stedet for å starte på ideen og spre den til teamene, kunne vi gjennomført en problemanalyse, forsøkt å få støtte fra ledelsen, formet et mandat og sparket i gang et prosjekt som skulle formalisere en ny design- og utviklingsmetode og tilhørende verktøykasse som alle skulle bruke.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Men hvis man ønsker at noe så stort virkelig skal være levende og bli brukt, må menneskene bry seg. Både prosessen og resultatet -- selve designsystemet -- må være gjennomsyret av kollektiv kunnskap. Fornyelse må skje hele tiden og komme fra grasrota. Denne typen oppførsel er vanskelig å regulere med mandat og prosjekt, men kommer gjennom kultur og praktiske opplevelser.&lt;/p&gt;&lt;h2&gt;Fremtind, og en ny start&lt;/h2&gt;&lt;p&gt;Denne læringen tok vi med oss når Fremtind ble formet gjennom en fusjon av SpareBank 1 Forsikring og DNB Forsikring i 2019. Ved siden av å støtte bankenes merkevarene, fikk vi nå også vår egen visuelle identitet utviklet av Scandinavian Design Group. Det var derfor innlysende, både for utviklerne, designerne og ledelsen, at vi trengte et eget designsystem. Men vi trengte også det samme engasjementet og viljen som vi hadde fra SpareBank 1 – Et designsystem-team bestående av en gruppe evangelister ble derfor etablert.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/assets/blog/kultur/fremtind-profil.png&quot; alt=&quot;Eksempel på Fremtinds nye profil&quot;/&gt;&lt;/p&gt;&lt;p&gt;Alle de eksisterende webløsningene i Fremtind var arvet fra SpareBank 1 Forsikring og hadde derfor kun SpareBank 1-profil. Men nå måtte vi støtte kunder i både SpareBank 1- og DNB-bankene. En ny webløsning for våre rådgivere var også blant flere allerede planlagte oppgaver. Denne skulle nå designes og utvikles med Fremtinds nye profil. Vi trengte derfor raskt å fordøye det vi kunne av den nye profilen og lage felles kode og designskisser som teamene skulle bruke i det nye selskapet.&lt;/p&gt;&lt;p&gt;Utviklingen skjøt fart! Mange hadde allerede opplevd fordelene av å jobbe der det fantes veletablerte designsystem, så visjonen var allerede godt forstått og ble raskt til enda flere skisser og mer kode som igjen ble tatt i bruk fortløpende i nye løsninger.&lt;/p&gt;&lt;p&gt;Etter hvert som flere begynte å bruke designsystemet så vi at det var nødvendig med interne designsystemkurs, og planer ble lagt for dette. Disse har aldri blitt realisert, men likevel har folk lært hvordan det fungerer og resultatet av arbeidet har blitt anerkjent med &lt;a href=&quot;https://www.grafill.no/visuelt/vinnere/2021/digital-design/designsystemer/designsystem-jokul&quot;&gt;designpris fra Visuelt&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;Et ønske om å påvirke&lt;/h2&gt;&lt;p&gt;Et designsystem blir intuitivt og velfungerende ved at det formes av selskapets inspirasjon fra mennesker heller enn gjennom formelle beslutninger og påkrevede forelesninger.&lt;/p&gt;&lt;p&gt;Kanskje et designsystem er en kultur heller enn et system?&lt;/p&gt;&lt;p&gt;Kanskje et designsystem faktisk ikke kan være hyllevare, men må være ferskvare?&lt;/p&gt;&lt;p&gt;Vårt ukentlige designsystemforum har skapt stort engasjement og mye læring gjennom å samle mennesker fra forskjellige fagfelt i jakten på de beste brukeropplevelsene. Designsystemforumet er derfor, som forumene i oldtidens Roma, stedet hvor seire feires, filosofier diskuteres, meninger ytres og felles arbeid planlegges. Det er et sted hvor energi og inspirasjon kan hentes til å fortsette jakten og et sted hvor vår designsystemkultur utvikles.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/assets/blog/kultur/MicrosoftTeams-image.png&quot; alt=&quot;Bilder av flere deltakere i digitalt designsystemforum&quot;/&gt;&lt;/p&gt;&lt;p&gt;Kort tid etter at store deler av designsystemets grunnleggende komponenter og designprinsipper var godt etablerte i flere løsninger, oppdaget vi utfordringer med typografien og bruken av farger. Vi måtte gjøre fundamentale endringer i bruken av profilen.&lt;/p&gt;&lt;p&gt;På nærmest magisk vis dukket det frivillige opp fra mange forskjellige team – De var klare til å finne løsninger på utfordringene og implementere disse i designsystemet. I løpet av veldig kort tid, og ved siden av andre høyt prioriterte oppgaver, lå nye versjoner av alle påvirkede komponenter og skisser klare og mange av løsningene ble umiddelbart oppdatert med ny typografi og nye farger.&lt;/p&gt;&lt;p&gt;Vår erfaring har vært at man lett kan lage et komponentbibliotek eller kjøpe hyllevare for å skape konsistente og gode brukeropplevelser. Men for at brukeropplevelsen skal skille seg ut i mengden, og raskt kunne tilpasse seg endrende behov, må man ha et levende designsystem med rot i selskapets kultur hvor hver enkelt både kan påvirke og ønsker å påvirke brukeres digitale opplevelse: Ferskvare.&lt;/p&gt;&lt;p&gt;Vi startet kanskje med en liten gruppe utviklere og en designer, men Fremtind og våre nesten tusen ansatte har dyrket frem en kultur hvor designsystem er en sentral del av hvordan vi jobber for at mennesker skal ha et trygt, verdifullt og attraktivt møte med forsikring.&lt;/p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/paPkOTZxf08&quot; title=&quot;YouTube video player&quot; frameBorder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;h3&gt;Attribusjoner&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://www.google.com/url?sa=i&amp;amp;url=https%3A%2F%2Fwww.yourgolftravel.com%2Fhotel-monteleone&amp;amp;psig=AOvVaw198f8PG3Zspr6LcXi4k6-8&amp;amp;ust=1628324149206000&amp;amp;source=images&amp;amp;cd=vfe&amp;amp;ved=0CAwQjhxqFwoTCIjZ5qr6m_ICFQAAAAAdAAAAABAD&quot;&gt;Hotel Monteleone&lt;/a&gt; - &lt;a href=&quot;https://creativecommons.org/licenses/by-nc-nd/4.0/legalcode&quot;&gt;Lisens&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Guide til dark mode i Jøkul]]></title><description><![CDATA[Hjelp! Jeg vil ikke! Aller først: Hvis du vil oppgradere til siste versjon av Jøkul, men ikke ennå er klar for å aktivere automatisk dark mode, lar det seg likevel gjøre! Bare sørg for at løsningen din rendres inne i et element med følgende attributter satt: Da vil applikasjonen…]]></description><link>https://jokul.fremtind.no/blog/auto-dark-mode/</link><guid isPermaLink="false">https://jokul.fremtind.no/blog/auto-dark-mode/</guid><pubDate>Wed, 07 Jul 2021 00:00:00 GMT</pubDate><content:encoded>&lt;div&gt;Automatisk dark mode bytter tema på løsninger bygget med Jøkul, basert på inn­stillingene på brukerens mobil eller data­maskin. Her er noen tips for å gjøre din løsning klar for dette.&lt;/div&gt;&lt;h2&gt;Hjelp! Jeg vil ikke!&lt;/h2&gt;&lt;p&gt;Aller først: Hvis du vil oppgradere til siste versjon av Jøkul, men ikke ennå er klar for å aktivere automatisk dark mode, lar det seg likevel gjøre! Bare sørg for at løsningen din rendres inne i et element med følgende attributter satt:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;jkl&amp;quot; data-theme=&amp;quot;light&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Da vil applikasjonen &lt;em&gt;alltid&lt;/em&gt; vises i lyst tema. Du kan selvfølgelig også spesifisere &lt;em&gt;mørkt&lt;/em&gt; tema på denne måten om du heller vil det. Merk at du også kan sette tema på enkeltdeler av løsningen din med &lt;code&gt;data-theme&lt;/code&gt;-attributten.&lt;/p&gt;&lt;h2&gt;Ting å huske på når du designer for dark mode&lt;/h2&gt;&lt;p&gt;Dark mode setter Granitt som bakgrunnsfarge og Snøhvit som tekstfarge på løsningen. Det blir imidlertid &lt;em&gt;ikke&lt;/em&gt; automatisk byttet bakgrunnsfarge på seksjoner der man har aktivt satt en bakgrunnsfarge (f.eks. felter som er uthevet med mørkere toner). For disse må man finne en passende bakgrunnsfarge for dark mode, som sørger for å gi tilsvarende kontrast mot Granitt bakgrunn.&lt;/p&gt;&lt;p&gt;Husk også på at skygger ikke vil synes mot mørke bakgrunner, og at felter som er utheves med skygge derfor bør utheves på annen måte i dark mode. For eksempel kan man bruke omriss eller endring i bakgrunnsfarge.&lt;/p&gt;&lt;p&gt;Hvis det er deler av løsningen din som &lt;em&gt;alltid&lt;/em&gt; skal vises i mørkt tema må du sørge for at bakgrunnen har ønsket kontrast mot Granitt bakgrunnsfarge, så den ikke går i ett med resten av løsningen i dark mode.&lt;/p&gt;&lt;h2&gt;Verktøy for å utvikle med dark mode&lt;/h2&gt;&lt;p&gt;Vi har forsøkt å gjøre det så enkelt som mulig å utvikle løsninger med tanke på dark mode. Som standard vil alle Jøkul-komponentene automatisk bytte mellom lyst og mørkt tema basert på brukerens preferanser. For helt enkle løsninger er det dermed ikke sikkert man må gjøre noe ekstra arbeid!&lt;/p&gt;&lt;h3&gt;Overstyre automatisk bytte&lt;/h3&gt;&lt;p&gt;Du kan overstyre det automatiske byttet ved å sette attributten &lt;code&gt;data-theme&lt;/code&gt; på elementer i DOMet. Det er også mulig å nøste seksjoner med forskjellig tema inne i hverandre.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;&amp;lt;div className=&amp;quot;jkl din-app&amp;quot;&amp;gt;
    // Dette innholdet bytter automatisk tema
    &amp;lt;div data-theme=&amp;quot;dark&amp;quot;&amp;gt;
        // Dette innholdet er alltid i mørkt tema
        &amp;lt;div data-theme=&amp;quot;light&amp;quot;&amp;gt;/* Dette innholdet er alltid lyst, selv om det er inne i en div med mørkt tema */&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Gjøre spesifikke endringer for dark mode&lt;/h3&gt;&lt;p&gt;I noen tilfeller holder det ikke med de automatiske endringene av bakgrunns- og tekstfarge, for eksempel når man har felter med en annen bakgrunnsfarge enn standard. For å gjøre det enklere å løse disse tilfellene har vi laget mixins som er tilgjengelige fra &lt;code&gt;jkl-core&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;@import &amp;quot;@fremtind/jkl-core/jkl&amp;quot;;

@include jkl.helper-light-mode-variables {
    --my-custom-background-color: #{jkl.$color-varde};
}
@include jkl.helper-dark-mode-variables {
    --my-custom-background-color: #{jkl.$color-skifer};
}

.my-fancy-component {
    background-color: var(--my-custom-background-color);
    background-color: jkl.$color-varde; // Husk å ta høyde for IE om du må støtte det
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Håndtere elementer som alltid skal ha mørkt tema&lt;/h3&gt;&lt;p&gt;Noen løsninger har elementer som alltid skal vises med mørkt tema, også når resten av applikasjonen er i lyst tema. For disse må du huske å sette bakgrunns- og tekstfarge spesifikt, samt å markere at den er låst til mørkt tema:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// MyDarkComponent.scss

.my-dark-component {
    background-color: jkl.$color-granitt;
    color: jkl.$color-snohvit;
}
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;// MyDarkComponent.tsx

&amp;lt;div className=&amp;quot;my-dark-component&amp;quot; data-theme=&amp;quot;dark&amp;quot;&amp;gt;
    Sammendrag
    &amp;lt;SummaryTable /&amp;gt;
    &amp;lt;PrimaryButton&amp;gt;Kjøp forsikring&amp;lt;/PrimaryButton&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;NB!&lt;/strong&gt;: Dersom du skal støtte Internet Explorer er du nødt til å bruke prop-en &lt;code&gt;inverted&lt;/code&gt; på komponenter inne i elementer med mørkt tema, siden den automatiske løsningen benytter seg av CSS custom properties&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Februar 2021]]></title><description><![CDATA[Da var februar over, og det er på tide med en ny liten oppdatering fra det som har rørt seg i Jøkul. Det har vært jobbet mye med mer og bedre dokumentasjon av universell utforming, som vi forhåpentligvis veldig snart ser resulatetene av. Gatsby, som portalen bygger på, har kommet…]]></description><link>https://jokul.fremtind.no/blog/updates/february2021/</link><guid isPermaLink="false">https://jokul.fremtind.no/blog/updates/february2021/</guid><pubDate>Mon, 08 Mar 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Da var februar over, og det er på tide med en ny liten oppdatering fra det som har rørt seg i Jøkul. Det har vært jobbet mye med mer og bedre dokumentasjon av universell utforming, som vi forhåpentligvis veldig snart ser resulatetene av. Gatsby, som portalen bygger på, har kommet i ny majorversjon, det bør gi oss bedre ytelse under utvikling og raskere byggtid, samt en enklere håntering av bilder. Den gir også tydeligere tilbakemeldinger om ting som gjør at serverside-rendering blir trøblete. Vi har også fått ryddet vekk gamle PRer, så vi er mer ajour enn på lenge.&lt;/p&gt;&lt;h2&gt;🌱 Releaser&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Card har fått en outline når det er &lt;a href=&quot;https://github.com/fremtind/jokul/pull/1858&quot;&gt;klikkbar&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;🐛 Bugfixer&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;ListItem tar nå imot &lt;a href=&quot;https://github.com/fremtind/jokul/pull/1839&quot;&gt;className riktig&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Checklist ser bedre ut i &lt;a href=&quot;https://github.com/fremtind/jokul/pull/1828&quot;&gt;IE&lt;/a&gt;&lt;/li&gt;&lt;li&gt;TextInput tar imot &lt;a href=&quot;https://github.com/fremtind/jokul/pull/1826&quot;&gt;defaultValue&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Datepicker &lt;a href=&quot;https://github.com/fremtind/jokul/pull/1805&quot;&gt;setter dato på blur&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;📰 Oppdateringer&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Oppdatert dokumentasjon av &lt;a href=&quot;https://github.com/fremtind/jokul/pull/1829&quot;&gt;animasjon&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Universell utforming seksjonen har fått en &lt;a href=&quot;https://github.com/fremtind/jokul/pull/1794&quot;&gt;tilbakemeldings-del&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Januar 2021]]></title><description><![CDATA[Nytt år, nye muligheter. Så med det så justerte vi litt på oppdateringspostene, med vilje eller ei, kommer nå januar-oppdateringen etter januar er ferdig. Det går stadig ny kode ut i produksjon i ulike prosjekt som bruker Jøkul, så endelig begynner vi å se fruktene helt ute i…]]></description><link>https://jokul.fremtind.no/blog/updates/january2021/</link><guid isPermaLink="false">https://jokul.fremtind.no/blog/updates/january2021/</guid><pubDate>Tue, 16 Feb 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Nytt år, nye muligheter. Så med det så justerte vi litt på oppdateringspostene, med vilje eller ei, kommer nå januar-oppdateringen etter januar er ferdig. Det går stadig ny kode ut i produksjon i ulike prosjekt som bruker Jøkul, så endelig begynner vi å se fruktene helt ute i PROD av alt arbeidet som er lagt ned i Jøkul. Det arbeides videre med universell utforming, både på komponenter og prosess nivå. Det forventes også nå som flere klienter er ute i produksjon at Jøkul kommer til å få en del nye komponenter og justetering på eksisterende ut i fra behovene til klientene i produksjon.&lt;/p&gt;&lt;h2&gt;🌱 Releaser&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Arbeidet med UU går videre, blant annet med flere seksjoner fra &lt;a href=&quot;https://github.com/fremtind/jokul/pull/1705&quot;&gt;denne PR&lt;/a&gt;&lt;ul&gt;&lt;li&gt;ToggleSlider fikk et løft for &lt;a href=&quot;https://github.com/fremtind/jokul/pull/1741&quot;&gt;skjerlesere&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Datepicker fikk fikset litt &lt;a href=&quot;https://github.com/fremtind/jokul/pull/1745&quot;&gt;referanse trøbbel&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Select fikk forwardRef, som betyr &lt;a href=&quot;https://github.com/fremtind/jokul/pull/1689&quot;&gt;breaking change&lt;/a&gt;, i praksis er det bare å oppdatere med mindre du gjør bruker referanser inn i select-komponenten&lt;/li&gt;&lt;li&gt;NavLink kan nå også peke &lt;a href=&quot;https://github.com/fremtind/jokul/pull/1733&quot;&gt;bakover&lt;/a&gt;&lt;/li&gt;&lt;li&gt;ToggleSlider fikk også et &lt;a href=&quot;https://github.com/fremtind/jokul/pull/1751&quot;&gt;visuelt løft&lt;/a&gt; og tar nå litt mer plass og er lettere å bruke&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/fremtind/jokul/pull/1781&quot;&gt;Feedback&lt;/a&gt; er blitt skrevet om og har nå litt subtil bevegelse i seg og støtter custom tilbakemelding basert på hva brukeren svarte&lt;/li&gt;&lt;li&gt;Ny &lt;a href=&quot;https://github.com/fremtind/jokul/pull/1807&quot;&gt;mixin&lt;/a&gt; for å gjøre det enklere for klienter å ta ibruk keyboard-navigasjon-stil som Jøkul gjør&lt;/li&gt;&lt;li&gt;Button fikk løst en &lt;a href=&quot;https://github.com/fremtind/jokul/pull/1784&quot;&gt;bug&lt;/a&gt;, anbefaler ALLE å oppgradere til nyeste versjon asap&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;📰 Oppdateringer&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Dokumentasjon av &lt;a href=&quot;https://github.com/fremtind/jokul/pull/1765&quot;&gt;animasjon&lt;/a&gt; er på plass&lt;/li&gt;&lt;li&gt;Litt mer utfyllende tekst om &lt;a href=&quot;https://github.com/fremtind/jokul/pull/1771/files&quot;&gt;språk og tone&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Oppdateringer i Sass]]></title><description><![CDATA[La meg starte med en viktig poeng, dette er nytt, vi har ikke dårlig tid på oss å få fikset dette, men er greit å ta tak i det når det passer. Det er ikke alle implementasjoner av Sass som har full støtte for dette enda, men om du bruker  sass  eller  dart-sass  kan du migrere nå…]]></description><link>https://jokul.fremtind.no/blog/scss/</link><guid isPermaLink="false">https://jokul.fremtind.no/blog/scss/</guid><pubDate>Fri, 12 Feb 2021 00:00:00 GMT</pubDate><content:encoded>&lt;div&gt;Med Jøkul prøver vi å holde oss oppdatert, både kodemessig, depdencecier, design og med andre ting og trender som beveger seg rundt oss. Nå har Sass-teamet kommet med noen oppdatering, som påvirker hvordan man skal bruke sass filene fra Jøkul.&lt;/div&gt;&lt;p&gt;La meg starte med en viktig poeng, dette er nytt, vi har ikke dårlig tid på oss å få fikset dette, men er greit å ta tak i det når det passer. Det er ikke alle implementasjoner av Sass som har full støtte for dette enda, men om du bruker &lt;code&gt;sass&lt;/code&gt; eller &lt;code&gt;dart-sass&lt;/code&gt; kan du migrere nå. &lt;code&gt;node-sass&lt;/code&gt; har ikke støtte per i dag, men om du bruker den bør du vurdere å migrere til referanse implementasjonen &lt;code&gt;sass&lt;/code&gt;. Det viktige endringen for oss er at &lt;code&gt;@import&lt;/code&gt; syntaxen gies tilbake til CSS. Per i dag er det måten vi har hentet funksjonalitet og stiler mellom ulike filer, det erstattes nå av &lt;code&gt;@use&lt;/code&gt; og &lt;code&gt;@forward&lt;/code&gt;. Dette gjelder kun ved importer av &lt;code&gt;.scss&lt;/code&gt; filer i &lt;code&gt;.scss&lt;/code&gt; filer, det påvirker ikke importen til JavaScript eller import av våre bydge &lt;code&gt;.css&lt;/code&gt; filer.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;@import &amp;#x27;~@fremtind/jkl-core/_functions.scss&amp;#x27;;

.my-class {
    height: rem(300px);
}

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Dette blir nå:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;@use &amp;#x27;~@fremtind/jkl-core/_functions.scss&amp;#x27;;

.my-class {
    height: functions.rem(300px);
}

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Import blir byttet ut med use, men importen er nå scopet til et namespace, så for å finne funksjonen må den kalles fra namespace. Du kan også sette det namespacet selv om du ønsker.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;@use &amp;#x27;~@fremtind/jkl-core/mixins/_all.scss&amp;#x27; as mix;

.my-class {
    @include mix.small-device {
        display: none;
    }
}

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Med nye syntaxen har ikke lengre den importete filen tilgang til variablene satt i fila den blir importert til. Det treffer oss for å sette opp fonten vår. For å fikse det må man gi den importerende fila tilgang via &lt;code&gt;with&lt;/code&gt; syntaxen.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$webfonts-dir: &amp;quot;/relative/path/to/font/files&amp;quot;;
@import &amp;quot;~@fremtind/jkl-webfonts/webfonts.scss&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;blir til&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;@use &amp;#x27;~@fremtind/jkl-webfonts/webfonts.scss&amp;#x27; with (
    $webfonts-dir: &amp;quot;/privat/forsikring/open/fonts&amp;quot;
);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Dette er litt kjipt å fikse, men heldigvis har sass-teamet lagd et migrasjonsverktøy som kan fikse de fleste importen (ikke webfonts). &lt;a href=&quot;https://sass-lang.com/documentation/cli/migrator&quot;&gt;https://sass-lang.com/documentation/cli/migrator&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;For å ta alle scss filene i samme slengen kan du gjøre noe ala dette på linux:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ find . -type f -name &amp;#x27;*.scss&amp;#x27; | xargs npx sass-migrator module --verbose --migrate-deps
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Vi har ikke migrert Jøkul enda, vi vil gi beskjed før vi gjør det. Vi anbefaler klienter å gjøre denne oppgraderingen ved første tilgjengelige anledning, så trenger man ikke bry seg den dagen det kommer en breaking change på dette.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Desember 2020 🤶]]></title><description><![CDATA[Det nærmer seg jul, og da går vi mot en litt roligere periode igjen. Det er flere prosjekter som er på vei ut eller allerede har kommet seg ut i Jøkuldrakt, både på web og native. Der har vi litt arbeid som står foran oss, for å synce inn native gjengen i Jøkul. Vi har noen ideer…]]></description><link>https://jokul.fremtind.no/blog/updates/december2020/</link><guid isPermaLink="false">https://jokul.fremtind.no/blog/updates/december2020/</guid><pubDate>Wed, 02 Dec 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Det nærmer seg jul, og da går vi mot en litt roligere periode igjen. Det er flere prosjekter som er på vei ut eller allerede har kommet seg ut i Jøkuldrakt, både på web og native. Der har vi litt arbeid som står foran oss, for å synce inn native gjengen i Jøkul. Vi har noen ideer der, så vi håper vi får satt i gang med slik at bredden til Jøkul blir enda større. 2021 nærmer seg med stormskritt, og med det en liten innstramming i reglene rundt Universell Utforming på internett, dette har lenge vært fokus for oss, men litt ekstra fokus har det fått og portalen har nå fått på plass en utvikler og testguide for &lt;a href=&quot;/preview/feat/stempelvarianter/universell-utforming&quot;&gt;Universell Utforming&lt;/a&gt;. Stor applaus til &lt;a href=&quot;https://github.com/joms&quot;&gt;@joms&lt;/a&gt;, &lt;a href=&quot;https://github.com/murstam&quot;&gt;@Murstam&lt;/a&gt; og &lt;a href=&quot;https://github.com/vegardsoerlie&quot;&gt;@vegardsoerlie&lt;/a&gt; for dette arbeidet 👏👏! På komponentsiden, så er grønnfargen i light mode endret, og layout skalaen er blitt mer komplett.&lt;/p&gt;&lt;h2&gt;🌱 Releaser&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;💅 Nye ikoner for &lt;a href=&quot;https://github.com/fremtind/jokul/pull/1649&quot;&gt;chekclist og crosslist&lt;/a&gt;&lt;/li&gt;&lt;li&gt;🔥 &lt;a href=&quot;https://github.com/fremtind/jokul/pull/1628&quot;&gt;React 17 støtte&lt;/a&gt;, React 16.8 eller nyere støttes også, ingen konkrete planer om å avslutte den støtte med det første&lt;/li&gt;&lt;li&gt;✨ Ny &lt;a href=&quot;https://github.com/fremtind/jokul/pull/1614&quot;&gt;grønnfarge i light-mode&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Layout spacing skalaen har fått en ny verdi i bunn av &lt;a href=&quot;https://github.com/fremtind/jokul/pull/1615&quot;&gt;skalaen&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;📰 Oppdateringer&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Egen seksjon for &lt;a href=&quot;/preview/feat/stempelvarianter/universell-utforming&quot;&gt;Universell Utforming&lt;/a&gt;!&lt;/li&gt;&lt;li&gt;Kom i gang med Jøkul &lt;a href=&quot;/preview/feat/stempelvarianter/guider/utvikling&quot;&gt;for utviklere&lt;/a&gt; er skrevet om, med ny seksjon for &lt;a href=&quot;/preview/feat/stempelvarianter/kom-i-gang/bygg&quot;&gt;Ta i bruk Jøkul&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;🎈 Design&lt;/h2&gt;&lt;p&gt;På designsiden jobbes det med å lage gode patterns og organismer i form at headere, footere, et malsystem (gridsystem) for designerne, hero-animasjoner for toppbilder og hvordan disse forholder seg til cards med microanimasjoner. Dette er nyttig arbeid der det er viktig med godt samarbeid på tvers av produktteamene og designsystemets kjerneteam slik at vi kan lage gode mønstre som skaper et konsistent Fremtind-uttrykk for alle våre løsninger.&lt;/p&gt;&lt;p&gt;Videre har Figma kommet med en rekke forbedringer som gjør at vi kan oppdatere komponentbiblioteket til å bli enda bedre for designerne. Dette handler om en forbedret Autolayout-funksjon som gjør det lettere å stable elementer i mer responsive komponenter og lage fleksible organismer basert på eksisterende komponenter.
Vi har også fått &amp;quot;Variants&amp;quot; - en elegant måte å gruppere komponenter med alle states og varianter. Vi kan nå lage ett asset som i praksis inneholder, hover-, fokusstate og samtidig toggle mellom dark/light mode, normal eller kompakt osv. Når vi kommer i gang med disse oppdateringene kan det bli en del breaking changes i Figmabiblioteket men samtidig blir verktøykassa enda bedre å bruke.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[November 2020]]></title><description><![CDATA[Hvis forrige månded var stille, så var denne stormen. En rekke nye kompenter, bugfixer i eksisternede, opprydding og forvaltning. 🌱 Releaser ✨  Datepicker  fikk en kraftig  robustifisering , ingen breaking changes, bare en sterk oppfordring om å oppdatere!  ✨  Ny validator , med…]]></description><link>https://jokul.fremtind.no/blog/updates/november2020/</link><guid isPermaLink="false">https://jokul.fremtind.no/blog/updates/november2020/</guid><pubDate>Mon, 16 Nov 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Hvis forrige månded var stille, så var denne stormen. En rekke nye kompenter, bugfixer i eksisternede, opprydding og forvaltning.&lt;/p&gt;&lt;h2&gt;🌱 Releaser&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;✨ &lt;a href=&quot;https://github.com/fremtind/jokul/pull/1558&quot;&gt;Datepicker&lt;/a&gt; fikk en kraftig &lt;a href=&quot;https://github.com/fremtind/jokul/pull/1443&quot;&gt;robustifisering&lt;/a&gt;, ingen breaking changes, bare en sterk oppfordring om å oppdatere! &lt;/li&gt;&lt;li&gt;✨ &lt;a href=&quot;https://github.com/fremtind/jokul/pull/1537&quot;&gt;Ny validator&lt;/a&gt;, med en &lt;a href=&quot;https://github.com/fremtind/jokul/pull/1536&quot;&gt;opprydding&lt;/a&gt; av pakken&lt;/li&gt;&lt;li&gt;🔥 Ny komponent &lt;a href=&quot;https://github.com/fremtind/jokul/pull/1534&quot;&gt;ContentToggle&lt;/a&gt;, animasjonskomponent som ivaretar et av våre animasjonsprinsipper for små bevegelser, se i &lt;a href=&quot;/preview/feat/stempelvarianter/komponenter/contenttoggle&quot;&gt;portalen&lt;/a&gt;&lt;/li&gt;&lt;li&gt;🔥 Ny pakke med &lt;a href=&quot;https://github.com/fremtind/jokul/pull/1528&quot;&gt;konstanter&lt;/a&gt;, se i &lt;a href=&quot;/preview/feat/stempelvarianter/komponenter/constants&quot;&gt;portalen&lt;/a&gt;&lt;/li&gt;&lt;li&gt;🔥 Ny komponent med &lt;a href=&quot;https://github.com/fremtind/jokul/pull/1524&quot;&gt;ToggleSlider&lt;/a&gt;, se i &lt;a href=&quot;/preview/feat/stempelvarianter/komponenter/toggleswitch&quot;&gt;portalen&lt;/a&gt;&lt;/li&gt;&lt;li&gt;🔥 Ny komponent &lt;a href=&quot;https://github.com/fremtind/jokul/pull/1522&quot;&gt;Check og crosslist&lt;/a&gt;, se i &lt;a href=&quot;/preview/feat/stempelvarianter/komponenter/list&quot;&gt;portalen&lt;/a&gt;&lt;/li&gt;&lt;li&gt;🔥 Ny pakke &lt;a href=&quot;https://github.com/fremtind/jokul/pull/1517&quot;&gt;Feedback&lt;/a&gt;, se i &lt;a href=&quot;/preview/feat/stempelvarianter/komponenter/feedback&quot;&gt;portalen&lt;/a&gt;&lt;/li&gt;&lt;li&gt;💅 Mobil forbedring på &lt;a href=&quot;https://github.com/fremtind/jokul/pull/1465&quot;&gt;knappene&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;📰 Oppdateringer&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Vi kan ønske @Fridaks velkommen som &lt;a href=&quot;https://github.com/fremtind/jokul/pull/1418&quot;&gt;bidragsyter&lt;/a&gt;!&lt;/li&gt;&lt;li&gt;Vi har skrudd på CodeQL for å analysere koden vår for &lt;a href=&quot;https://github.com/fremtind/jokul/pull/1414&quot;&gt;sikkerhetshull&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Vi har lagt til &lt;a href=&quot;https://github.com/fremtind/jokul/pull/1431&quot;&gt;CodeSandbox&lt;/a&gt; integrasjon, som tilgjengeliggjør oppdatert versjon av pakkene våre i en sandbox på hver PR. Hvis PRen er knyttet til en bugrapport som inneholder end CodeSandbox for å reprodusere feilen, så vil den automatisk forkes og bygges med oppdatert versjon i PRen.&lt;/li&gt;&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Vis din IDE: @lfbergee's VSCode]]></title><description><![CDATA[Litt bakgrunn først, VSCode er utviklet av et lite amerikansk firma Microsoft. Den startet livet sitt som en liten enkel editor for Azure, men etterhvert ble den såpass komplett at Microsoft stappet den inn i et Electron skall og begynte å shippe den som en desktop app også. Så i…]]></description><link>https://jokul.fremtind.no/blog/ide/lfberge-vs-code/</link><guid isPermaLink="false">https://jokul.fremtind.no/blog/ide/lfberge-vs-code/</guid><pubDate>Fri, 02 Oct 2020 00:00:00 GMT</pubDate><content:encoded>&lt;div&gt;For å skrive kode trenger vi noe å skrive kode i, for de fleste av oss utviklere betyr det en IDE. Og i mitt tilfelle har det vært &lt;a href=&quot;https://code.visualstudio.com/&quot; class=&quot;jkl-link jkl-link--external&quot;&gt;VSCode&lt;/a&gt; de siste ca 5 årene. I en Fremtindsk deleånd, skal jeg prøve å dele noe av det jeg gjør for å customize min VSCode.&lt;/div&gt;&lt;p&gt;Litt bakgrunn først, VSCode er utviklet av et lite amerikansk firma Microsoft. Den startet livet sitt som en liten enkel editor for Azure, men etterhvert ble den såpass komplett at Microsoft stappet den inn i et Electron skall og begynte å shippe den som en desktop app også. Så i bunn så bygger den på webteknologi, typescript, html og css. Grunntanken er en lettvekst teksteditor med støtte for plugins for å bygge IDEen du trenger. Liten aside, VSCode er på god vei tilbake til weben, feks &lt;a href=&quot;https://codesandbox.io&quot;&gt;CodeSanbox&lt;/a&gt; bruker Monaco (grunnlaget til VSCode) og mye tyder på at Github Codespaces blir VSCode (med litt ekstra snacks) som skytjeneste.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Prøv &lt;code&gt;ctrl+shift+I&lt;/code&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;Min IDE&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/assets/blog/ide/vs-code-1.png&quot;/&gt;&lt;/p&gt;&lt;p&gt;La oss starte med det obligatoriske bilde. Jeg bruker &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=jolaleye.horizon-theme-vscode&quot;&gt;Horizon&lt;/a&gt; som theme. &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=arcticicestudio.nord-visual-studio-code&quot;&gt;Nord&lt;/a&gt; og &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=dustinsanders.an-old-hope-theme-vscode&quot;&gt;An Old Hope Theme&lt;/a&gt; er også i rotasjonen. For ikoner i explorer-taben bruker jeg &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=vscode-icons-team.vscode-icons&quot;&gt;vscode-icons&lt;/a&gt;.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Kodeblokkene her referer til settings.json fila du finner ved &lt;code&gt;ctrl + p&lt;/code&gt; og Settings(JSON)&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;&amp;quot;workbench.colorTheme&amp;quot;: &amp;quot;Horizon&amp;quot;,
&amp;quot;workbench.iconTheme&amp;quot;: &amp;quot;vscode-icons&amp;quot;,
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Annet visuelt jeg har tweeket på er fonten, &lt;a href=&quot;https://github.com/tonsky/FiraCode&quot;&gt;Fira Code&lt;/a&gt; med font ligatures og &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2&quot;&gt;Brackets Pair Colorizer 2&lt;/a&gt; som fargelegger tilhørende paranteser.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;&amp;quot;editor.fontFamily&amp;quot;: &amp;quot;Fira Code Retina&amp;quot;,
&amp;quot;editor.fontLigatures&amp;quot;: true,
&amp;quot;terminal.integrated.fontFamily&amp;quot;: &amp;quot;Fira Code Retina&amp;quot;,
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; Ellers av opinionated ting jeg har gjort med utsenede er å flytte hele aktivitetsbaren til høyre. Jeg toggler den inn og ut (&lt;code&gt;ctrl + b&lt;/code&gt;) hundrevis av ganger hver dag, og når den er der så flytter ikke koden på seg, imotsetning til når den er til venstre.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;&amp;quot;workbench.sideBar.location&amp;quot;: &amp;quot;right&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Som en av de som lider av &lt;a href=&quot;https://bundlephobia.com/&quot;&gt;bundlephobia&lt;/a&gt; så har jeg &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=wix.vscode-import-cost&quot;&gt;Import Cost&lt;/a&gt;, som legger til størrelsen på importen i grønntekst etter importen. Desuten driver &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens&quot;&gt;GitLens&lt;/a&gt; å strør litt om seg i UIet med info om repositoryet. Den er også ganske fin til å visualisere git historiken iforhold til den innebygde i VSCode, dog ikke i nærheten av Intellij sin fantastiske git merge editor sak.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Prøv &lt;code&gt;ctrl + shift + p&lt;/code&gt; og skriv &lt;code&gt;git&lt;/code&gt; så ser du alle mulighetene GitLens tilbyr&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Jeg setter veldig pris på det minimalistiske utrykket, jeg vil at IDEen ikke skal være i veien for koden. Så aktivitetsbaren går vekk når den ikke trengs (&lt;code&gt;ctrl + b&lt;/code&gt;), terminalen går vekk med &lt;code&gt;ctrl + shift \&lt;/code&gt;. Og alt er modifisertbart, så om du kommer fra en annen IDE, så finnes det sannsynligvis en keymap som gjør at du kan bruke hurtigtastene du er vant med, eller du kan enkelt lage din egen. Vim og Emacs er støttet også om man er en sånn en, ellers så anbefaller jeg å skrive ut denne &lt;a href=&quot;https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf&quot;&gt;VSCode Cheet Sheet&lt;/a&gt; og begynne å bruke mest mulig at keyboardet isteden for musa. Og gå til innkjøp av et ordentlig keyboard (just saying, hvor mange ganger klikker du ikke på tastaturet ditt iløpet av en dag...).&lt;/p&gt;&lt;h2&gt;Tips og triks&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ctrl + p&lt;/code&gt;, om ikke du vil lære noen shortcuts, lær hvertfall denne. Der har du tilgang til mer eller mindre alt VSCode kan gjøre. Den starter med hurtig åpning av filer.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/assets/blog/ide/file.png&quot;/&gt;&lt;/p&gt;&lt;p&gt;Her kan du søke og åpne filer fra det åpne prosjektet ditt, og skriver du inn &lt;code&gt;&amp;gt;&lt;/code&gt; så kommer du inn i &lt;code&gt;Command palette&lt;/code&gt;. Evt &lt;code&gt;ctrl + shift + p&lt;/code&gt; for å gå dit direkte. Det er utgangspunktet for det meste av det kule i VSCode. Bli venn med Command Palette! Husker du ikke hotkeys for operasjonen du vil gjøre, så ligger den her, og lister ut hva hotkeysa er til neste gang du trenger å gjøre den operasjonen.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/assets/blog/ide/command-palett.png&quot;/&gt;&lt;/p&gt;&lt;h3&gt;Flere prosjekt&lt;/h3&gt;&lt;p&gt;De fleste av oss jobber vel fort vekk med mer enn et prosjekt, så &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=alefragnani.project-manager&quot;&gt;Project Manager&lt;/a&gt; er helt essensiell for meg. &lt;code&gt;alt + shift + p&lt;/code&gt; gir meg en liste av mine prosjekter og kan enkelt hoppe mellom de. For de som sliter med å skille prosjekt fra hverandre, så kan det være smart å sette ulike themes per prosjekt, ved å sette i workspace settings.json isteden for den globale. Eventuel &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=johnpapa.vscode-peacock&quot;&gt;Peacock&lt;/a&gt; løser samme problem på en litt annen måte.&lt;/p&gt;&lt;h3&gt;Snippets&lt;/h3&gt;&lt;p&gt;Snippets er forkortelser for ting du ofte skriver. Feks &lt;code&gt;imr&lt;/code&gt; blir til &lt;code&gt;import React from &amp;#x27;react&amp;#x27;;&lt;/code&gt;, skriv forkortelsen og tab eller enter for å ekspandere teksten. Du kan skrive disse selv, feks jeg har &lt;code&gt;jklhl&lt;/code&gt; som lager &lt;code&gt;&amp;lt;h$1 className=\&amp;quot;jkl-title-large\&amp;quot;&amp;gt;$2&amp;lt;/h$1&amp;gt;&lt;/code&gt;, &lt;code&gt;$1&lt;/code&gt; er der cursoren starter, tab tar meg til &lt;code&gt;$2&lt;/code&gt;. Hvis du vil ha min Jøkul snippets, så ligger de som en Gist på min &lt;a href=&quot;https://gist.github.com/lfbergee/b4c928728b1e736ca111a82ec064bc28&quot;&gt;github&lt;/a&gt;, &lt;code&gt;ctrl + shift + p&lt;/code&gt; &lt;code&gt;Configure User Snippets&lt;/code&gt; og lag en ny snippets vil med det scopet du syns er fornuftig.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/assets/blog/ide/animation.gif&quot;/&gt;&lt;/p&gt;&lt;p&gt;Du kan også laste ned andres snippets, feks &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets&quot;&gt;denne&lt;/a&gt; for react, graphql og javascript. Hvis du mister autocomplete, så du har skrevet inn &lt;code&gt;imr&lt;/code&gt;, men listen med valg er borte, sett cursoren på slutten av ordet og trykk &lt;code&gt;ctrl + space&lt;/code&gt;, så får du forslagslista tilbake.&lt;/p&gt;&lt;h3&gt;One more thing&lt;/h3&gt;&lt;p&gt;Vel egentlig så er det en haug flere ting. Eslint-integrasjon, Prettier som kodeformaterer, formater kun endra linjer(ny funksjonalitet i 1.49!!), Jest-integrasjon, fornuftig git-integrasjon, LiveShare, IntelliCode, Quokka..
Men for å avslutte med en siste liten sak, &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker&quot;&gt;Code Spell Check&lt;/a&gt;, med den så kan jeg lure de fleste med at jeg faktisk kan skrive på engelsk.&lt;/p&gt;&lt;h2&gt;Oppsummering&lt;/h2&gt;&lt;p&gt;Men litt av poenget med VSCode sånn jeg ser det, er å vokse inn i IDEen din. Du må installere en god del plugins for å få en komplett opplevelse, mens andre alternativ kommer ferdig ut av boksen. Men det gjør også at du i din takt lærer deg funksjoner, legger til plugins som løser dine problem, isteden for å fullstendig overvelde deg med alle funksjonene med en gang. For Java utvikling så har jeg fortsatt ikke kommet i mål med VSCode, det blir litt tungt og kronglete iforhold til Intellij, men for javascript, typescript, html, css og det meste annet du kan tenke på som er relevant for web, så er VSCode goto for meg. Samtidig er det bare et verktøy og jeg syns man bør være villig til å prøve andre vertøy også, så om noe som passer deg bedre dukker opp så kan man bruke det isteden.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;I deleånden, så sender jeg ballen over til &lt;a href=&quot;https://github.com/piofinn&quot;&gt;@Piofinn&lt;/a&gt; til å dele noe fra sin workflow!&lt;/p&gt;&lt;/blockquote&gt;</content:encoded></item><item><title><![CDATA[Oktober 2020]]></title><description><![CDATA[Den forrige måneden var kanskje ikke den mest spennende for Jøkul sin del.
Det har stort sett være finpuss og bugfixer som har blitt publisert. Sånn sett ser oktober ut til å bli en mer spennede måned. 
Oktober er også  hacktober , og siden Jøkul er open source kvalifiserer alle…]]></description><link>https://jokul.fremtind.no/blog/updates/october2020/</link><guid isPermaLink="false">https://jokul.fremtind.no/blog/updates/october2020/</guid><pubDate>Thu, 01 Oct 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Den forrige måneden var kanskje ikke den mest spennende for Jøkul sin del.
Det har stort sett være finpuss og bugfixer som har blitt publisert. Sånn sett ser oktober ut til å bli en mer spennede måned.
Oktober er også &lt;a href=&quot;https://hacktoberfest.digitalocean.com/&quot;&gt;hacktober&lt;/a&gt;, og siden Jøkul er open source kvalifiserer alle PRer i oktober.
Det ligger saker og ting i issuelisten om du har lyst å bidra, du kan feks starte &lt;a href=&quot;https://github.com/fremtind/jokul/issues?q=is%3Aissue+is%3Aopen+label%3A%22%F0%9F%A7%B8+good+first+issue%22&quot;&gt;her&lt;/a&gt;u
Ellers så står Dependabot på som en helt og holder dependenciene våre oppdatert.&lt;/p&gt;&lt;h2&gt;🌱 Releaser&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;💥 Button har hatt en breaking change med &lt;a href=&quot;https://github.com/fremtind/jokul/pull/1370&quot;&gt;forwardRef&lt;/a&gt;.
I praksis skal ikke det bety så mye i de aller fleste tilfeller. &lt;a href=&quot;https://reactjs.org/docs/forwarding-refs.html&quot;&gt;Les mer&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;📰 Oppdateringer&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Vi kan ønske @Mikaila94 velkommen som &lt;a href=&quot;https://github.com/fremtind/jokul/pull/1335&quot;&gt;bidragsyter&lt;/a&gt;!&lt;/li&gt;&lt;li&gt;Vi har endelig fått på plass en fullverdi &lt;a href=&quot;https://github.com/fremtind/jokul/pull/1295&quot;&gt;font stack&lt;/a&gt;&lt;/li&gt;&lt;li&gt;@piofinn forklarer hvordan &lt;a href=&quot;/preview/feat/stempelvarianter/blog/darkmode/&quot;&gt;dark mode funker&lt;/a&gt;&lt;/li&gt;&lt;li&gt;@Steinop gikk i dybden på &lt;a href=&quot;/preview/feat/stempelvarianter/blog/ikoner_sept2020/&quot;&gt;ikoner&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;🔮 Kommende&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Komponent for å laste bilder i ulik størrelse for ulike dingser, med blur up for hurtigere oppleved ytelse&lt;/li&gt;&lt;li&gt;Hovedmenyen til portalen er på vei inn som komponent&lt;/li&gt;&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Dark mode og Inverted—Hva er greia?]]></title><description><![CDATA[Oppdatert 2022.02.10: La til tips om  jkl -klassen og oppdaterte eksempelkoden Hvis du har sett på komponentsidene i portalen den siste tiden har du sikkert merket at det har kommet et ekstra valg i eksemplene: Valget "Dark mode", under overskriften "Visning", gjør tilsynelatende…]]></description><link>https://jokul.fremtind.no/blog/darkmode/</link><guid isPermaLink="false">https://jokul.fremtind.no/blog/darkmode/</guid><pubDate>Mon, 21 Sep 2020 00:00:00 GMT</pubDate><content:encoded>&lt;div&gt;Jøkul gir deg to hjelpemidler for å jobbe med mørkt tema i hele eller deler av løsningen din. Men hvilket skal du bruke når? Og hvordan?&lt;/div&gt;&lt;ul&gt;&lt;li&gt;Oppdatert 2022.02.10: La til tips om &lt;code&gt;jkl&lt;/code&gt;-klassen og oppdaterte eksempelkoden&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Hvis du har sett på komponentsidene i portalen den siste tiden har du sikkert merket at det har kommet et ekstra valg i eksemplene: Valget &amp;quot;Dark mode&amp;quot;, under overskriften &amp;quot;Visning&amp;quot;, gjør tilsynelatende det samme som valget &amp;quot;Invertert&amp;quot;, under overskriften &amp;quot;Egenskaper&amp;quot;, har gjort frem til nå.&lt;/p&gt;&lt;p&gt;Nøkkelen til forskjellen ligger i overskriftene: &amp;quot;Invertert&amp;quot; er en egenskap som settes på selve komponenten og kun gjelder den, mens &amp;quot;Dark mode&amp;quot; er en egenskap som settes på eksempelet og gjelder for hele området inne i eksemplet. Dette er også forskjellen på hvordan du bruker dem i utvikling.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/assets/blog/dark-mode-inverted.png&quot; alt=&quot;Valgene for &amp;quot;Dark mode&amp;quot; og &amp;quot;Invertert&amp;quot; i et komponenteksempel&quot;/&gt;&lt;/p&gt;&lt;h2&gt;Mørkt tema for moderne nettlesere&lt;/h2&gt;&lt;p&gt;I moderne nettlesere er den beste løsningen for dark mode å benytte seg av attributten &lt;code&gt;data-theme=&amp;quot;dark&amp;quot;&lt;/code&gt;. Alle komponentene i Jøkul vil automatisk bytte til mørkt tema dersom de befinner seg inne i et element med denne attributten satt. Du kan dermed enkelt sette mørkt tema på hele eller deler av løsningen du lager. Attributten endrer ingenting på selve elementet den er satt på, så du må selv velge/endre bakgrunnsfarge og skriftfarge.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;&amp;lt;body class=&amp;quot;jkl&amp;quot; data-theme=&amp;quot;dark&amp;quot;&amp;gt;
    &amp;lt;InfoMessageBox title=&amp;quot;Mørkt tema&amp;quot;&amp;gt;Jøkul-komponenter på denne siden vil automatisk få mørkt tema.&amp;lt;/InfoMessageBox&amp;gt;

    &amp;lt;div class=&amp;quot;jkl&amp;quot; data-theme=&amp;quot;light&amp;quot;&amp;gt;
        &amp;lt;InfoMessageBox title=&amp;quot;Lyst tema&amp;quot;&amp;gt;I denne delen av DOMen er det lyst tema som gjelder&amp;lt;/InfoMessageBox&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Du kan fint sette mørkt tema på kun en liten del av løsningen, og man kan også eksplisitt sette lyst tema med &lt;code&gt;data-theme=&amp;quot;light&amp;quot;&lt;/code&gt; på samme måte. Eksemplene i portalen er et eksempel på dette, der &amp;quot;Dark mode&amp;quot;-valget styrer &lt;code&gt;data-theme&lt;/code&gt;-attributten kun på komponentvinduet. Merk deg at du bør sette &lt;code&gt;jkl&lt;/code&gt;-klassen på elementet for å være
sikret at elementer uten Jøkul-klasser får riktig farge og bakgrunnsfarge.&lt;/p&gt;&lt;p&gt;Denne løsningen benytter seg av &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties&quot;&gt;CSS custom properties&lt;/a&gt;, og fungerer derfor ikke i IE. I de fleste tilfeller anbefaler vi å &lt;em&gt;ikke&lt;/em&gt; implementere dark mode for IE, og se på tilbudet om mørkt tema som en form for &lt;a href=&quot;https://en.wikipedia.org/wiki/Progressive_enhancement&quot;&gt;progressive enhanchement&lt;/a&gt;. Om du likevel har et behov for å bruke mørkt tema på hele eller deler av løsningen din også for IE, kan du lese om dette under.&lt;/p&gt;&lt;h2&gt;Mørkt tema for Internet Explorer&lt;/h2&gt;&lt;p&gt;Dersom du er nødt til å implementere mørkt tema for Internet Explorer kan man altså ikke bruke den generelle løsningen over, men må i stedet styre temaet per enkelt komponent. Dette gjøres ved å sette prop&amp;#x27;en &lt;code&gt;inverted&lt;/code&gt; til true. Siden dette må gjøres på hver eneste Jøkul-komponent i løsningen vil nok dette best løses ved hjelp av f.eks. en &lt;a href=&quot;https://reactjs.org/docs/context.html&quot;&gt;context&lt;/a&gt; eller &lt;a href=&quot;https://reactjs.org/docs/render-props.html&quot;&gt;render props&lt;/a&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;&amp;lt;InfoMessageBox inverted&amp;gt;Denne meldingen har mørkt tema&amp;lt;/InfoMessageBox&amp;gt;
&amp;lt;WarningMessageBox&amp;gt;Denne meldingen har lyst tema&amp;lt;/WarningMessageBox&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;const darkTheme = useContext(myThemeContext);

&amp;lt;SuccessMessageBox inverted={darkTheme}&amp;gt;Denne meldingen bytter tema ut fra verdien i myThemeContext&amp;lt;/SuccessMessageBox&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;</content:encoded></item><item><title><![CDATA[Ikon relatert til em-size]]></title><description><![CDATA[Bakgrunn Ikonbiblioteket i Jøkul har frem til nå bestått av desktop- og kompaktversjoner av ikonene og hatt varierende størrelser på innrammingen. Dette kan gi utfordringer mht plassering hvis man ønsker å bytte ut en instance av et ikon i Figma eller i kode. Løsning For å lage…]]></description><link>https://jokul.fremtind.no/blog/ikoner_sept2020/</link><guid isPermaLink="false">https://jokul.fremtind.no/blog/ikoner_sept2020/</guid><pubDate>Mon, 07 Sep 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;/assets/blog/ikon_illustrasjon.png&quot; alt=&quot;Illustrasjon av ikon justert i forhold til fonthøyde, linjehøyde og baseline&quot;/&gt;&lt;/p&gt;&lt;h2&gt;Bakgrunn&lt;/h2&gt;&lt;p&gt;Ikonbiblioteket i Jøkul har frem til nå bestått av desktop- og kompaktversjoner av ikonene og hatt varierende størrelser på innrammingen. Dette kan gi utfordringer mht plassering hvis man ønsker å bytte ut en instance av et ikon i Figma eller i kode.&lt;/p&gt;&lt;h2&gt;Løsning&lt;/h2&gt;&lt;p&gt;For å lage et enklere og mer fleksibelt prinsipp har vi valgt å basere ikonene på fontens em-size. Det betyr at alle ikonene er tegnet innenfor en ramme som matcher fontens høyde mens bredden tilpasses ikon- bredden. Slik følger vi samme prinsipp som for tegn med ulik bredde i et skriftsnitt. Ikonets baseline (grunnlinje) følger fontens baseline og ikonet kan i praksis skaleres opp relatert til fontens størrelse. På denne måten trenger vi ikke lenger én definert ikonstørrelse for desktop og en annen for kompakt fordi det samme ikonet følger fontstørrelsen.&lt;/p&gt;&lt;p&gt;&lt;em&gt;(Her kan du enten stoppe å lese eller fortsette hvis du ønsker nerdete detaljer...)&lt;/em&gt;&lt;/p&gt;&lt;h2&gt;Tykkelse&lt;/h2&gt;&lt;p&gt;Ikonene er tegnet slik at de følger tykkelsen til fonten Fremtind Grotesk i størst mulig grad. I motsetning til fonten har ikonene samme tykkelse på horisontale og vertikale streker og er bygget opp med en strektykkelse tilsvarende Fremtind Grotesk satt i 20 px (desktop body size).
 Enkelte ikoner slik som Checkmark, Kryss og Pluss er i tillegg tegnet i bold og minuskel-versjoner. Dette for at de skal kunne fremstå som ekstra tydelige i sammenligningstabeller og gi større spillerom.&lt;/p&gt;&lt;p&gt;For vanlige ikoner er strektykkelsen satt til 1,2 px mens den for bold versjoner er satt til 2,0 px. &lt;/p&gt;&lt;h2&gt;Men hvorfor …?&lt;/h2&gt;&lt;p&gt;Strektykkelsene kunne variert kalligrafisk slik at de matchet fontens vekt både horisontalt og vertikalt og totalt sett vært justert slik at de optisk fremsto som like. For å ha et forvaltbart og enkelt system har vi besluttet å bruke de eksakte verdiene ovenfor.
Med tanke på optisk justering har bold versjonene kun fått en tykkere strek selv om konsekvensen er at ikonet bygger lavere i forhold til optisk grunnlinje enn regular versjon gjør. Gevinsten er at ikonet får større muligheter for dynamisk animert strektykkelse.&lt;/p&gt;&lt;h2&gt;Skalering i Figma&lt;/h2&gt;&lt;p&gt;Hvis et ikon skaleres opp for å matche en gitt fontstørrelse er det viktig at du tar utgangspunkt i fontsize og ikke lineheight. Ikonet skaleres proposjonalt i høyde/bredderetning slik at det ikke blir strukket (hold inne shift-tasten). Merk at ved skalering i Figma må du bruke scale-funksjonen (keyboard-K) slik at også strektykkelsen skaleres sammen med størrelsen.&lt;/p&gt;&lt;h2&gt;Og så videre ...&lt;/h2&gt;&lt;p&gt;Prinsippene ovenfor er viktige å ta hensyn til ved design av nye ikoner slik at vi får et konsistent og funksjonelt ikonbibliotek: Design ikonet som en font med optiske justeringer i forhold til baseline og sett i forhold til fontens høyder på versaler og minuskler men bruk de definerte verdiene for strektykkelser.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[September 2020]]></title><description><![CDATA[Ny måned, ny oppdateringspost. De fleste er tilbake fra ferie og maskineriet fyrer på alle sylindere. Ergo har det skjedd en hel del. Heldigvis,  ingen breaking changes  eller noe som krever noe annet enn en oppdatering av pakkene. Ellers begynner innrammingsballen å rulle, det…]]></description><link>https://jokul.fremtind.no/blog/updates/september2020/</link><guid isPermaLink="false">https://jokul.fremtind.no/blog/updates/september2020/</guid><pubDate>Wed, 02 Sep 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Ny måned, ny oppdateringspost. De fleste er tilbake fra ferie og maskineriet fyrer på alle sylindere. Ergo har det skjedd en hel del. Heldigvis, &lt;strong&gt;ingen breaking changes&lt;/strong&gt; eller noe som krever noe annet enn en oppdatering av pakkene. Ellers begynner innrammingsballen å rulle, det betyr at flere team kobler seg på Jøkul, der kommer nok fokuset til å ligge fremover, få disse teamene til å føle seg hjemme og følge opp innrammingsbehovene.&lt;/p&gt;&lt;h2&gt;📰 Oppdateringer&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Nytt domene!!&lt;/strong&gt; &lt;a href=&quot;https://jokul.fremtind.no/&quot;&gt;https://jokul.fremtind.no/&lt;/a&gt; er det nye hjemmet til Jøkul. Vi er jo veldig glade i github, men vi hører jo hjemme hos oss selv. Det blir også lettere for de utenfor utvikling å følge med og ta ibruk Jøkul også.&lt;/li&gt;&lt;li&gt;Vi har ventet på en del fikser fra core-components, men selvom vi har lagd PRer og de har ligget der en stund, så har det ikke vært fremdrift. En midlertidig løsning på dette var å bruke &lt;a href=&quot;https://github.com/fremtind/jokul/pull/1214&quot;&gt;patch-package&lt;/a&gt; til å legge våre fikser inn, uten å måtte forke eller andre drastiske tiltak. Kjerneteamet kommer til å fortsette å følge opp core-components situasjonen.&lt;/li&gt;&lt;li&gt;Automatiske visuelle regresjonstester er på vei inn i de fleste pakker. Vi ønsker å øke tilliten til at endringer i Jøkul gjør det de skal, og ved å få på plass visuelle regresjonstester håper vi å gjøre akkurat det. Per nå er det Accordion, Button og Checkbox som har disse testene, det vil rulles ut på flere av komponenten og etterhvert settes som krav for å få lov til å merge. Vi har allerede sett en markant forbedring i stabiliteten til Cypress testene, så vi er nok ikke veldig langt unna å sette det som krav.&lt;/li&gt;&lt;li&gt;Det er nå støtte for universell dark mode i alle&lt;em&gt; komponentene. Det vil si at du slipper å bruke &lt;code&gt;inverted&lt;/code&gt;-propen på komponentene for å få dark mode, med mindre du trenger å støtte IE11. Det fungerer slik at alle komponenter automatisk bytter over til dark mode dersom de er inne i et element med attributten &lt;code&gt;data-theme=&amp;quot;dark&amp;quot;&lt;/code&gt;. &lt;/em&gt;&lt;code&gt;Card&lt;/code&gt;, &lt;code&gt;ProgressBar&lt;/code&gt; og &lt;code&gt;ToggleSwitch&lt;/code&gt; har foreløpig ikke denne funksjonaliteten, i påvente av komplett redesign.&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;🌱 Releaser&lt;/h2&gt;&lt;h3&gt;Pakker&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/fremtind/jokul/pull/1191&quot;&gt;✏️ Ikoner&lt;/a&gt;&lt;ul&gt;&lt;li&gt;Samle alle ikonene og eksponer i en pakke&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/fremtind/jokul/pull/1154&quot;&gt;✏️ Accordion&lt;/a&gt;&lt;ul&gt;&lt;li&gt;Oppdatert design&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/fremtind/jokul/pull/1208&quot;&gt;✏️ Linker&lt;/a&gt;&lt;ul&gt;&lt;li&gt;Oppdatert design&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/fremtind/jokul/pull/1201&quot;&gt;💡 Søkbar select&lt;/a&gt;&lt;ul&gt;&lt;li&gt;Ny komponent&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/fremtind/jokul/pull/1216&quot;&gt;💡 NavLink&lt;/a&gt;&lt;ul&gt;&lt;li&gt;Ny komponent for navigeringslenker&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/fremtind/jokul/pull/1240&quot;&gt;💡 Autosuggest&lt;/a&gt;&lt;ul&gt;&lt;li&gt;Ny komponent for tekstfelt med forslag&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Portalen&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;💅 &lt;a href=&quot;https://github.com/fremtind/jokul/pull/1142&quot;&gt;Grupering i sidemenyen&lt;/a&gt;&lt;ul&gt;&lt;li&gt;Nå som både utilityklasser, hooks og valideringsregler dokumenteres under komponentersiden, så begynner det bli vanskelig å holde oversikten.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;💅 &lt;a href=&quot;https://github.com/fremtind/jokul/pull/1241&quot;&gt;Mobil støtte&lt;/a&gt;&lt;ul&gt;&lt;li&gt;Vi har fått med oss alt folk av og til bruker telefonen sin til å gå på internet. Portalens primærfokus er power users på desktop, men vi bryr oss også om de som bruker telefonen sin. Med denne tar vi enda noen skritt mot en god brukeropplevelse på alle flater.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Intersection observer]]></title><description><![CDATA[Use the intersection observer api to unlock cool UX features in your web application. Fremtind provides a thin wrapper hook in the  @fremtind/jkl-react-hooks  package, to make it easier to use intersection observers in React. The obvious The obvious use case is to lazy load…]]></description><link>https://jokul.fremtind.no/blog/intersectionObserver/Intersection/</link><guid isPermaLink="false">https://jokul.fremtind.no/blog/intersectionObserver/Intersection/</guid><pubDate>Fri, 21 Aug 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Use the intersection observer api to unlock cool UX features in your web application. Fremtind provides a thin wrapper hook in the &lt;code&gt;@fremtind/jkl-react-hooks&lt;/code&gt; package, to make it easier to use intersection observers in React.&lt;/p&gt;&lt;h2&gt;The obvious&lt;/h2&gt;&lt;p&gt;The obvious use case is to lazy load content. When the content is outside the viewport, it doesn&amp;#x27;t provide your users with anything (at least untill they scroll). So it would be pretty nice to just defer loading the content that is below the fold. In this example we&amp;#x27;ll use the observer to set opacity on the element, with a transition and little delay you&amp;#x27;ll see the element fade into the viewport when you scroll it in.&lt;/p&gt;&lt;div class=&quot;jkl-portal-paragraph&quot;&gt;&lt;iframe src=&quot;https://codesandbox.io/embed/competent-cloud-jy2kb?autoresize=1&amp;amp;fontsize=14&amp;amp;hidenavigation=1&amp;amp;module=%2Fsrc%2FIntersectionComponent.js&amp;amp;theme=dark&quot; style=&quot;width:100%;height:500px;border:0;border-radius:4px;overflow:hidden&quot; title=&quot;competent-cloud-jy2kb&quot; allow=&quot;accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking&quot; sandbox=&quot;allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;p&gt;Lets look a bit closer at how &lt;code&gt;useIntersectionObsever&lt;/code&gt; work.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;import React from &amp;quot;react&amp;quot;;
import { useIntersectionObserver } from &amp;quot;@fremtind/jkl-react-hooks&amp;quot;;

const MyComponent = () =&amp;gt; {
    useIntersectionObserver(targetRef, onIntersect, fallback, options);

    return null;
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Load the hook into you React component and follow the &lt;a href=&quot;https://reactjs.org/docs/hooks-rules.html&quot;&gt;rules of hooks&lt;/a&gt;. The intersection hook takes a reference to a component, a function that is fired by the observer, a fallback function and a options object. Lets add the reference.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;import React, { useRef } from &amp;quot;react&amp;quot;;
import { useIntersectionObserver } from &amp;quot;@fremtind/jkl-react-hooks&amp;quot;;

const MyComponent = () =&amp;gt; {
    const targetRef = useRef(null);
    useIntersectionObserver(targetRef, onIntersect, fallback, options);

    return &amp;lt;div ref={targetRef}&amp;gt;content&amp;lt;/div&amp;gt;;
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Like that, we&amp;#x27;ve loaded the &lt;code&gt;useRef&lt;/code&gt; hook from React, and applied that reference to our returning div. If you want to do this with your custom components, &lt;a href=&quot;https://reactjs.org/docs/forwarding-refs.html&quot;&gt;forwardRefs&lt;/a&gt; might be useful.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;import React, { useRef } from &amp;quot;react&amp;quot;;
import { useIntersectionObserver } from &amp;quot;@fremtind/jkl-react-hooks&amp;quot;;

const MyComponent = () =&amp;gt; {
    const targetRef = useRef(null);
    const [isIntersecting, setIsIntersecting] = useState(false);
    const onIntersect = (entires) =&amp;gt; {
        setIsIntersecting(entires.some((entry) =&amp;gt; entry.isIntersecting));
    };
    useIntersectionObserver(targetRef, onIntersect, fallback, options);

    return &amp;lt;div ref={targetRef}&amp;gt;content&amp;lt;/div&amp;gt;;
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The buisness end of the hook is the onIntersect callback. This is a function where you get an array of observered elements back. In this case we want to see if anything in the array is intersecting with the viewport. We need to store that somewhere, so we&amp;#x27;ll add a &lt;code&gt;useState&lt;/code&gt; hook to hold the intersection value.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;import React, { useRef } from &amp;quot;react&amp;quot;;
import { useIntersectionObserver } from &amp;quot;@fremtind/jkl-react-hooks&amp;quot;;

const MyComponent = () =&amp;gt; {
    const targetRef = useRef(null);
    const [isIntersecting, setIsIntersecting] = useState(false);
    const onIntersect = (entires) =&amp;gt; {
        setIsIntersecting(entires.some((entry) =&amp;gt; entry.isIntersecting));
    };
    const fallback = () =&amp;gt; setIsIntersecting(true);
    useIntersectionObserver(targetRef, onIntersect, fallback, options);

    return &amp;lt;div ref={targetRef}&amp;gt;content&amp;lt;/div&amp;gt;;
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Browser support for the intersection observer api is pretty strong, but lets get it out of the way, IE 11 do not support this API. So if you need to support IE11 in your application, use the fallback function to set the component in the state you need. Here we need to make sure the content is visible for IE users, without this, they will never load the content. Enough about IE11, I don&amp;#x27;t want to make myself more aggrevated.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;import React, { useRef } from &amp;quot;react&amp;quot;;
import { useIntersectionObserver } from &amp;quot;@fremtind/jkl-react-hooks&amp;quot;;

const MyComponent = () =&amp;gt; {
    const targetRef = useRef(null);
    const [isIntersecting, setIsIntersecting] = useState(false);
    const onIntersect = (entires) =&amp;gt; {
        setIsIntersecting(entires.some((entry) =&amp;gt; entry.isIntersecting));
    };
    const fallback = () =&amp;gt; setIsIntersecting(true);
    const options = { rootMargin: &amp;quot;0px&amp;quot;, threshold: [0.0, 1.0] };
    useIntersectionObserver(targetRef, onIntersect, fallback, options);

    return &amp;lt;div ref={targetRef} style={{ display: isIntersecting ? &amp;quot;block&amp;quot; : &amp;quot;none&amp;quot; }}&amp;gt;&amp;lt;/div&amp;gt;;
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Finally we need to supply an options object. This provides the constraints for the observer, when it should fire and where its margins should be.&lt;/p&gt;&lt;p&gt;Now this is the most basic example, but it&amp;#x27;s still useful and quite easy to expand. Lets do that, expand.&lt;/p&gt;&lt;h2&gt;The not so obvious&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/assets/blog/intersectionObserver/intersection.gif&quot;/&gt;&lt;/p&gt;&lt;p&gt;See it live &lt;a href=&quot;https://tp0f6.csb.app/&quot;&gt;here&lt;/a&gt;. Codesandbox flakes out abit when its inside a iframe, so maybe don&amp;#x27;t try to do fancy stuff with intersection observers inside iframes. Anyways, these couple of files creates a pretty cool little effect, where the header changes style and attaches to the top of the viewport, using the intersection observer and position sticky.&lt;/p&gt;&lt;p&gt;The magic here is to play with the rootMargins. By setting it to -98% of the bottom, the intersecting happens at the top of the container, not the bottom as usual. Then we can use that to change the class name and the apperance of the div. This shows that you can use the observer for more than just lazy loading content below the fold. This can enable us to more closely replicate native app feeling in our webapps.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;// IntersectionComponent.jsx
import React, { useRef, useState } from &amp;quot;react&amp;quot;;
import { useIntersectionObserver } from &amp;quot;@fremtind/jkl-react-hooks&amp;quot;;

export const IntersectionComponent = ({ children }) =&amp;gt; {
    const [isIntersecting, setIsIntersecting] = useState(false);
    const targetRef = useRef(null);
    const onIntersect = (entries) =&amp;gt; setIsIntersecting(entries.some((entry) =&amp;gt; entry.isIntersecting));
    const fallback = () =&amp;gt; console.log(&amp;quot;useful for browser that do not support intersection observer&amp;quot;);
    const options = {
        rootMargin: &amp;quot;0px 0px -98% 0px&amp;quot;,
        threshold: [0, 1.0],
    };
    useIntersectionObserver(targetRef, onIntersect, fallback, options);

    return (
        &amp;lt;div className={`target ${isIntersecting ? &amp;quot;target--small&amp;quot; : &amp;quot;target--large&amp;quot;}`} ref={targetRef}&amp;gt;
            &amp;lt;div&amp;gt;{children}&amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    );
};
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.target {
    overflow: hidden;
    transition: ease-in-out 500ms;
    padding: 1rem 0.5rem;
    transition-property: color, font-size, box-shadow, background-color;
    &amp;amp; &amp;gt; div {
        transition: ease-in-out 500ms;
        transition-property: transform;
    }

    &amp;amp;--small {
        color: rebeccapurple;
        box-shadow: 0px 5px 4px -6px rgba(0, 0, 0, 0.75);
        font-size: 2rem;
        background-color: white;
        position: sticky;
        top: 0;
        &amp;amp; &amp;gt; div {
            transform: translateX(0%);
        }
    }
    &amp;amp;--large {
        color: black;
        font-size: 3rem;
        background-color: transparent;
        &amp;amp; &amp;gt; div {
            transform: translateX(10%);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Focus on mobile&lt;/h2&gt;&lt;p&gt;On desktop, focus and hover states help interactive elements stand out. We don&amp;#x27;t have the same luxury on mobile, but we can use the intersection observer to know when an element is in a prime clickarea, and set the hover state programmaticly. &lt;a href=&quot;https://codesandbox.io/s/intersection-3-n62x8&quot;&gt;See code&lt;/a&gt;, open preview in separate tab to actually see the effect. Mark that this is not hover, the mouse in complety stationary, the effect is triggered by the intersection.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/assets/blog/intersectionObserver/mobile.gif&quot;/&gt;&lt;/p&gt;&lt;h3&gt;References&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API#The_root_element_and_root_margin&quot;&gt;Intersection observer API documentation&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://jokul.fremtind.no/komponenter/intersectionobserver&quot;&gt;useIntersectionObserver&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Figma og Fremtind]]></title><description><![CDATA[Figma er et skisse- og prototypingsverktøy. Her kan vi lage skisser og prototyper for utvikling / raske konsepter / brukertester og mer. Figma er vektorbasert og minner veldig om Sketch. Figma tillater også samarbeid i sanntid, og flere personer kan jobbe samtidig i samme fil…]]></description><link>https://jokul.fremtind.no/blog/FremtindFigma/</link><guid isPermaLink="false">https://jokul.fremtind.no/blog/FremtindFigma/</guid><pubDate>Mon, 10 Aug 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Figma er et skisse- og prototypingsverktøy. Her kan vi lage skisser og prototyper for utvikling / raske konsepter / brukertester og mer. Figma er vektorbasert og minner veldig om Sketch.&lt;/p&gt;&lt;p&gt;Figma tillater også samarbeid i sanntid, og flere personer kan jobbe samtidig i samme fil. Dette muliggjør effektivt samhandling når man er flere designere på et prosjekt eller oppgave.&lt;/p&gt;&lt;p&gt;Figma er også nyttig for de som ikke er designere. Her kan man se og kommentere på skisser,  klikke seg gjennom prototyper, og lese ut størrelser, avstander og stilnavn på skjermbildene.&lt;/p&gt;&lt;h2&gt;Roller&lt;/h2&gt;&lt;p&gt;I Figma er du enten en Editor eller en Viewer.&lt;/p&gt;&lt;p&gt;&lt;em&gt;Editors&lt;/em&gt; kan opprette, slette, redigere filer og lage prototyper etc.&lt;/p&gt;&lt;p&gt;&lt;em&gt;Viewers&lt;/em&gt; kan se filer og kommentere (trykk “C” for kommentarmodus), de kan også lese ut størrelser, avstander og stilnavn i skissene.&lt;/p&gt;&lt;p&gt;Lisensen tar bare betalt for editors, men alle som oppretter en figmabruker med en @fremtind.no epost har tilgang som viewer. Dette gjør det enkelt for alle interessenter å holde seg oppdatert og involvert i designprosessen, og for utviklere og testere å referere til skissene. Inviter de du jobber med til å lage en bruker sånn at de kan få tilgang til skissene dine.&lt;/p&gt;&lt;h2&gt;Fremtind og Figma&lt;/h2&gt;&lt;p&gt;Figma lar deg bygge en egen mappestruktur med ulike tilganger. På øverste nivå har vi Fremtind, som er organisasjonen. Her kan man sette globale fonter og komponentbibliotek som skal være tilgjengelige på tvers. Under det har man teams, og i hvert team er det ett eller flere prosjekt hvor man finner de faktiske filene.&lt;/p&gt;&lt;h3&gt;Team i Fremtind&lt;/h3&gt;&lt;p&gt;Hvert område har sitt eget team på Figma, for å bli med gå til “Fremtind” og velg “Join Team”. Du kan være medlem av flere teams , bli med på (join) team du skal jobbe med eller er interessert i. Hvert team kan ha flere “prosjekt” under seg. PM, BM, Oppgjør, Rådgiverklienter etc., har sine egne team.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Designsystemet:&lt;/strong&gt; I dette teamet finner du Jøkul (designsystemet), portalen, og diverse “byggesoner” for å teste ut ting. Det er ikke lov å redigere i biblioteksfilen, bare i byggesonen.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Designavdelingen:&lt;/strong&gt; Dette teamet er et område for diverse filer som ikke passer under teamene. Kan være egne arbeidsfiler eller for sprinter, designdager, designkritikk etc etc.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Andre team:&lt;/strong&gt; Ved varig behov anbefales det å opprette team slik at det er enkelt for alle å finne filer som hører til et område som ikke er tilknyttet et av de eksisterende teamene.&lt;/p&gt;&lt;h3&gt;Prosjekter&lt;/h3&gt;&lt;p&gt;Under hvert team kan det opprettes flere prosjekter. Det er nyttig når du har store team som jobber med flere områder. Prosjektene du jobber med hyppigst er smart å markere som favoritt (stjerne) slik at de er enkle å finne i sidemenyen.&lt;/p&gt;&lt;h3&gt;Filer&lt;/h3&gt;&lt;p&gt;Første page i en fil må gjøres til en “cover” page som forteller hva filen er og hvem som er ansvarlig. Opprett flere filer istedetfor å la en fil bli ekstremt stor. For store filer er vanskelige å bruke og får ytelsesproblemer.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/assets/blog/OpprettCoverpage.png&quot;/&gt;&lt;/p&gt;&lt;h2&gt;Lær mer om Figma&lt;/h2&gt;&lt;p&gt;Se igjennom de andre pagene på denne filen for litt ymse tips og triks. Se YouTube og Figma.com for tutorials og dokumentasjon.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://help.figma.com/hc/en-us/categories/360002051613-Getting-Started&quot;&gt;Figma - Getting started&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/@aminataballo16/the-sketch-vs-figma-dilemma-110a1e40a96&quot;&gt;Differences Sketch vs Figma&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.figma.com/file/AZvwxH6s1xGPNAMmFFqHEA/Fremtind-og-Figma?node-id=0%3A1&quot;&gt;Fremtinds Figmafil med tips og triks&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[IE + Jøkul = Sant]]></title><description><![CDATA[Oppdatert 2021.11.15:  IE-støtte droppes i Jøkul . Oppdatert 2020.09.03: NanoID. Steg én: Polyfill JavaScript for IE 11 Legg til følgende konfigurasjon i  package.json : BrowsersList forteller verktøy som  Babel  og  PostCSS  hvilke polyfills som kreves. I tillegg til dette må vi…]]></description><link>https://jokul.fremtind.no/blog/iePlussJokulErlikSant/iePlussJokulErlikSant/</link><guid isPermaLink="false">https://jokul.fremtind.no/blog/iePlussJokulErlikSant/iePlussJokulErlikSant/</guid><pubDate>Wed, 05 Aug 2020 00:00:00 GMT</pubDate><content:encoded>&lt;div class=&quot;jkl-message-box jkl-message-box--warning jkl-spacing-2xl--bottom&quot; role=&quot;alert&quot; data-theme=&quot;light&quot;&gt;&lt;svg class=&quot;jkl-message-box__icon&quot; aria-hidden=&quot;true&quot; viewBox=&quot;2 3 20 18&quot; fill=&quot;none&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; clip-rule=&quot;evenodd&quot; d=&quot;M18.3588 20.5107L5.64157 20.5107C3.33259 20.5107 1.88917 18.0116 3.04301 16.0116L9.40163 4.98996C10.5561 2.98885 13.4443 2.98885 14.5987 4.98996L20.9574 16.0116C22.1112 18.0116 20.6678 20.5107 18.3588 20.5107ZM12.7515 13.6525L12.7515 7.63131L11.9988 7.63131L11.2462 7.63131L11.2462 13.6525L12.7515 13.6525ZM12.0012 15.0458C11.441 15.0458 10.9868 15.5 10.9868 16.0602C10.9868 16.6205 11.441 17.0747 12.0012 17.0747C12.5615 17.0747 13.0157 16.6205 13.0157 16.0602C13.0157 15.5 12.5615 15.0458 12.0012 15.0458Z&quot; fill=&quot;currentColor&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;div class=&quot;jkl-message-box__content&quot;&gt;&lt;p class=&quot;jkl-message-box__title&quot;&gt;Du ser på en gammel bloggpost&lt;/p&gt;&lt;p class=&quot;jkl-body&quot;&gt;Støtten for Internet Explorer har blitt droppet i Jøkul etter at denne bloggposten ble skrevet.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&amp;quot;Vi må støtte IE 11&amp;quot; trenger ikke være den verste setningen en utvikler kan høre. Med noen enkle steg kan man komme veldig langt uten å hverken måtte snu opp-ned på markup eller kode.&lt;/div&gt;&lt;ul&gt;&lt;li&gt;Oppdatert 2021.11.15: &lt;a href=&quot;/preview/feat/stempelvarianter/blog/jokul-dropper-ie-stotte/&quot;&gt;IE-støtte droppes i Jøkul&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Oppdatert 2020.09.03: NanoID.&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Steg én: Polyfill JavaScript for IE 11&lt;/h2&gt;&lt;p&gt;Legg til følgende konfigurasjon i &lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;&amp;quot;browserslist&amp;quot;: {
    &amp;quot;extends @fremtind/browserslist-config-jkl&amp;quot;,
    &amp;quot;ie 11&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;BrowsersList forteller verktøy som &lt;a href=&quot;https://babeljs.io/docs/en/babel-preset-env&quot;&gt;Babel&lt;/a&gt; og &lt;a href=&quot;https://github.com/postcss/autoprefixer#browsers&quot;&gt;PostCSS&lt;/a&gt; hvilke polyfills som kreves. I tillegg til dette må vi registrere noen ekstra polyfills:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import &amp;quot;document-register-element&amp;quot;;
import &amp;quot;react-app-polyfill/ie11&amp;quot;;
import &amp;quot;react-app-polyfill/stable&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;document-register-element&lt;/code&gt; polyfiller &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components&quot;&gt;Web Components&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;&lt;code&gt;react-app-polyfill/ie11&lt;/code&gt; polyfiller f.eks &lt;code&gt;Promise&lt;/code&gt;, &lt;code&gt;fetch&lt;/code&gt; og &lt;a href=&quot;https://www.npmjs.com/package/react-app-polyfill&quot;&gt;noen andre nyttige funksjoner&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;&lt;code&gt;react-app-polyfill/stable&lt;/code&gt; polyfiller &lt;a href=&quot;https://www.npmjs.com/package/react-app-polyfill#polyfilling-other-language-features&quot;&gt;ytteligere JavaScript-funksjoner som ikke er støttet&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Jøkul bruker &lt;a href=&quot;https://github.com/ai/nanoid&quot;&gt;NanoID&lt;/a&gt;, som ikke lenger støtter IE 11. For å fikse dette kan man fortelle Babel at pakken må kompileres, samt definere &lt;code&gt;window.crypto&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// webpack.config.ts
module.exports = {
    module: {
        rules: [
            {
                test: /\.m?js$/,
                exclude: [/node_modules\/(?!(nanoid)\/).*/],
                use: {
                    loader: &amp;quot;babel-loader&amp;quot;,
                    options: {
                        presets: [&amp;quot;@babel/preset-env&amp;quot;, &amp;quot;@babel/preset-react&amp;quot;],
                        plugins: [&amp;quot;@babel/plugin-proposal-export-default-from&amp;quot;],
                    },
                },
            },
        ],
    },
};

// polyfills.ts
if (typeof window !== &amp;quot;undefined&amp;quot; &amp;amp;&amp;amp; !window.crypto) {
    // @ts-ignore
    window.crypto = window.msCrypto;
}

// index.ts
import &amp;quot;./common/polyfills&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Steg to: Autoprefix CSS&lt;/h2&gt;&lt;p&gt;IE 11 er ikke helt ukjent for å henge litt etter på stylingfronten. Ofte tenker man spesielt på &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout&quot;&gt;CSS Grid&lt;/a&gt;. Her finnes det også verktøy som kan hjelpe oss på veien, det er dog ikke like mye å hente her som på JavaScript-siden.&lt;/p&gt;&lt;p&gt;Ved å benytte oss av &lt;a href=&quot;https://postcss.org/&quot;&gt;PostCSS&lt;/a&gt; kan vi få en del nyttig funksjonalitet, som blant annet autoprefix. Bare dette hjelper oss et stykke på veien. Dette verktøyet vil prøve å polyfille funksjonalitet så langt det er mulig. Men CSS Grid begrenser seg noe, og derfor er grid-modulen i autoprefixeren slått av som standard. Ved å legge til følgende konfigurasjonsfil kan vi konfigurere PostCSS til å autoprefixe CSS Grid:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-javscript&quot;&gt;// postcss.config.js

module.exports = {
  plugins: {
    autoprefixer: { grid: &amp;#x27;autoplace&amp;#x27; }
  }
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Denne vil prøve å polyfille CSS &lt;a href=&quot;https://github.com/postcss/autoprefixer#grid-autoplacement-support-in-ie&quot;&gt;så godt det lar seg gjøre&lt;/a&gt; ved å blant annet bruke &lt;code&gt;nth-child&lt;/code&gt; selectorer.&lt;/p&gt;&lt;h2&gt;Veien videre&lt;/h2&gt;&lt;p&gt;JavaScript er mer eller mindre ferdig. Her skal du slippe å tenke på noe mer konfigurasjon, polyfills eller lignende. Men for styling ser derimot historien ganske annerledes ut.&lt;/p&gt;&lt;p&gt;PostCSS og Autoprefixer fikser det &lt;a href=&quot;https://css-tricks.com/css-grid-in-ie-css-grid-and-the-new-autoprefixer/#autoprefixer-has-new-super-powers&quot;&gt;meste&lt;/a&gt;, med noen &lt;a href=&quot;https://css-tricks.com/css-grid-in-ie-css-grid-and-the-new-autoprefixer/#table-disclaimers&quot;&gt;unntak&lt;/a&gt;. Stort sett er det med CSS Grid man merker den manglende støtten.&lt;/p&gt;&lt;h3&gt;Vår venn, Flexbox&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox&quot;&gt;Flexbox&lt;/a&gt; er CSS Grid sin éndimensjonale storebror. I motsetning til CSS Grid er Flexbox mye bedre støttet i IE 11, og kan brukes med mye større trygghet.&lt;/p&gt;&lt;p&gt;En viktig ting å huske på er at CSS Grid ikke utelukker Flexbox. Dette er verktøy som kan brukes sammen og hver for seg, med sine bruksområder. Der hvor CSS Grid er todimensjonal og kan gå både vertikalt og horisontalt, bryr Flexbox seg kun om én av aksene. Selv om det frister å skrive mindre kode for å lage noe pent med CSS Grid, kan det være lurt å ta seg bryet med å gjøre det i Flexbox. Et godt eksempel er her er et fler-kolonne oppsett:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.columns: {
    display: grid;
    grid-template-columns: repeat(4, auto);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Hvordan kan dette gjenskapes med Flexbox?&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.columns {
    display: flex;
    flex-wrap: wrap;
}

.columns .column {
    flex: 1 0 25%;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Gotchas&lt;/h2&gt;&lt;h4&gt;1. Bruk CSS Grid til å definere navngitte områder og kjente størrelser; PostCSS klarer ikke blant annet &lt;code&gt;grid-auto-rows&lt;/code&gt; og &lt;code&gt;grid-auto-columns&lt;/code&gt;.&lt;/h4&gt;&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.page__wrapper {
    display: grid;
    grid-template-rows: auto auto 1fr auto;
    grid-template-columns: 100%;
    grid-template-areas:
        &amp;quot;message&amp;quot;
        &amp;quot;header&amp;quot;
        &amp;quot;main&amp;quot;
        &amp;quot;footer&amp;quot;;
}

.page__content {
    display: grid;
    grid-template-columns: 1fr 1fr;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;2. Må det egentlig se likt ut i IE 11 som i Chrome? Bruk &lt;code&gt;@supports()&lt;/code&gt; for alt det den er verdt!&lt;/h4&gt;&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.avtale-oversikt__gruppe-wrapper {
    display: flex;
    flex-wrap: wrap;
    max-width: $bm-max-width;
    margin: 0 auto;
    padding: jkl.$spacing-2xl 0 $padding-bottom 0;
}

@supports (display: grid) {
    .avtale-oversikt__gruppe-wrapper {
        display: grid;
        grid-template-columns: 50% 50%;
        grid-template-rows: auto auto;
        grid-auto-flow: row dense;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;3. Går innholdet i bare én retning? Like greit å bare bruke Flexbox!&lt;/h4&gt;&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.page__content {
    display: flex;
    flex-direction: column;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Videre lesing om CSS Grid i IE 11&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://css-tricks.com/css-grid-in-ie-css-grid-and-the-new-autoprefixer/&quot;&gt;CSS Grid in IE: CSS Grid and the New AutoPrefixer (css-tricks.com)&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/@elad/supporting-css-grid-in-internet-explorer-b38669e75d66&quot;&gt;Supporting CSS Grid in Internet Explorer (medium.com)&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/postcss/autoprefixer#does-autoprefixer-polyfill-grid-layout-for-ie&quot;&gt;Does Autoprefixer polyfill Grid Layout for IE (github.com/postcss)&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Sommer 2020]]></title><description><![CDATA[Dette er første oppdateringspost fra Jøkul. Planen er at det kommer flere av disse med jevne mellomrom, så blir det forhåpentligvis lettere å følge med på hva som skjer med Jøkul. 📰 Oppdateringer Før fellesferien tok oss ut til Prekestolen, Loen og Lofoten med bil, hadde vi en…]]></description><link>https://jokul.fremtind.no/blog/updates/august2020/</link><guid isPermaLink="false">https://jokul.fremtind.no/blog/updates/august2020/</guid><pubDate>Wed, 05 Aug 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Dette er første oppdateringspost fra Jøkul. Planen er at det kommer flere av disse med jevne mellomrom, så blir det forhåpentligvis lettere å følge med på hva som skjer med Jøkul.&lt;/p&gt;&lt;h2&gt;📰 Oppdateringer&lt;/h2&gt;&lt;p&gt;Før fellesferien tok oss ut til Prekestolen, Loen og Lofoten med bil, hadde vi en sprint med fokus på portalen. Målet var å få på plass dokumentasjon av alle nøkkelverdier som ikke var dokumentert tidligere. Bildebruk, bevegelse, spacing og typografi har fått både bruk og variabler dokumentert. Både for utviklere og designere. &lt;/p&gt;&lt;p&gt;For pakkene våre har det ikke skjedd de største endringene, men det er gjort en del forbedringer og optimaliseringer. Eneste breaking change iløpet av siste periode er at det er lagt til forwardRef for checkbox, gitt at man ikke har gjort noe spesielt med checkbox komponenten, så innebærer det ingen endring. Men det betyr at man nå kan sette referanse på checkbox, og det vil peke på det riktige input-elementet. &lt;/p&gt;&lt;h2&gt;🌱 Releaser&lt;/h2&gt;&lt;h3&gt;Pakker&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/fremtind/jokul/pull/1140&quot;&gt;💡 Mindre pakkestørrelser&lt;/a&gt;&lt;ul&gt;&lt;li&gt;Simen gjorde et grundig stykke arbeid graving i byggingen av både portal og pakkene våre. Ved å optimalisere byggprosessen ble pakkestørrelsen redusert med 15-40%. Også portalens bundle ble redusert med ca 30%.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/fremtind/jokul/pull/1103&quot;&gt;✏️ Støtte for ref i checkbox&lt;/a&gt;&lt;ul&gt;&lt;li&gt;Er breaking change fordi checkbox komponenten nå blir pakket inn i en forwardRef, for de fleste vil det fortsatt virke som normalt.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/fremtind/jokul/pull/1093&quot;&gt;✏️ Farger som utility klasser&lt;/a&gt;&lt;ul&gt;&lt;li&gt;Både spacing og farger er nå tilgjengelige som utilityklasser, så de enkleste stilene kan nå oppnåes uten å måtte skrive egen css.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Portalen&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/fremtind/jokul/pull/1078&quot;&gt;🧪 Itegrasjonstester i portalen&lt;/a&gt;&lt;/li&gt;&lt;li&gt;📚 Dokumentasjon av farger&lt;/li&gt;&lt;li&gt;📚 Dokumentasjon av spacing&lt;/li&gt;&lt;li&gt;📚 Dokumentasjon av typografi&lt;/li&gt;&lt;li&gt;📚 Ny bildebruk side&lt;/li&gt;&lt;li&gt;💅 Responsiv meny&lt;/li&gt;&lt;li&gt;💅 Sideoverganger og animasjoner&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;🔮 Kommende&lt;/h2&gt;&lt;p&gt;I perioden fremover ligger det enkelte forbedringer i pakkene, oppdatering av design til nyeste stilen og bugfixer. Det jobbes også med en mer robust hosting løsning via Vercel som feks også vil vi preview av PR, som vil gjøre det mye enklere for designere å verifisere endringer i kode.&lt;/p&gt;&lt;h3&gt;Pakker&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/fremtind/jokul/pull/1139&quot;&gt;🦽 Hook for reduced motion&lt;/a&gt;&lt;ul&gt;&lt;li&gt;Løser bug ved reduced motion for komponenter som bruker useAnimation hooken, og tilgjengeliggjør reduced motion OS-settingen for oss i js-kontekst. Brukes feks til å fjerne paralax effekt og andre større animasjoner for brukere som ikke ønsker det. Blir viktig for kundefacing applikasjoner som benytter seg av animasjoner og fortsatt bevare god brukeropplevelse for alle brukere.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/fremtind/jokul/pull/1153&quot;&gt;⚰️ Fjerne divider line&lt;/a&gt;&lt;ul&gt;&lt;li&gt;Divider line fant seg aldri plass i Figma, så dermed ble den aldri ordentlig tatt i bruk heller. Så for nå blir den fjernet.  &lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/fremtind/jokul/pull/1154&quot;&gt;💅 Oppdatert design Accordion&lt;/a&gt;&lt;ul&gt;&lt;li&gt;Accordion med tidlig utgave av designet får et løft og darkmode støtte&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/fremtind/jokul/issues/1167&quot;&gt;💅 Oppdatert design på lenker&lt;/a&gt;&lt;ul&gt;&lt;li&gt;Lenker med tidlig utgave av designet får et løft og darkmode støtte&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Portalen&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/fremtind/jokul/pull/1142&quot;&gt;Grupering i sidemenyen&lt;/a&gt;&lt;ul&gt;&lt;li&gt;Nå som både utilityklasser, hooks og valideringsregler dokumenteres under komponentersiden, så begynner det bli vanskelig å holde oversikten.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Framer motion i Jøkul]]></title><description><![CDATA[Bevegelse er et av hovedprinsippene bak profilen til Fremtind. Men animasjon er ikke lett. Frem til nå har vi stort sett basert oss på enkle transformasjoner i ren CSS.
Når man skal gjøre mer animasjon, på større deler av applikasjonen blir det litt kronglete å gjøre alt for hånd…]]></description><link>https://jokul.fremtind.no/blog/framerMotion/framerMotion/</link><guid isPermaLink="false">https://jokul.fremtind.no/blog/framerMotion/framerMotion/</guid><pubDate>Sat, 06 Jun 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Bevegelse er et av hovedprinsippene bak profilen til Fremtind. Men animasjon er ikke lett. Frem til nå har vi stort sett basert oss på enkle transformasjoner i ren CSS.
Når man skal gjøre mer animasjon, på større deler av applikasjonen blir det litt kronglete å gjøre alt for hånd i CSS. Det finnes utallige javascript bibliotek for å forbedre utvikleropplevelsen rundt animasjon.
En av de nyere alternativene er &lt;a href=&quot;https://www.framer.com/motion/&quot;&gt;Framer Motion&lt;/a&gt;. Det er arvtageren til Pose fra Popmotion, en av de mest populære og likte animasjonsbibilotekene der ute. De fleste animasjonsbibilotekene har en tendens til
å bli veldig imperative, så det parrer ikke så pent med øvrig React kode. Framer Motion derimot er først og fremst deklarativt, selvom du har muligheten til å være imperativ om du må.&lt;/p&gt;&lt;div class=&quot;wrapper jkl-portal-paragraph&quot;&gt;&lt;div class=&quot;example-container&quot;&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;&amp;lt;motion.div whileHover={{ scale: 1.15 }} whileTap={{ rotate: 45, scale: 0.95 }} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;APIet til Framer Motion er relativt enkelt å sette seg inn i, og gir mange mulighter til å lage interaktive animasjoner. I eksemplet over er det enkle bevelgelser på hover og tap.
Disse blir oversatt til inline style, og så langt det er mulig blir det performant, gpu akselererte, 60 fps css transisjoner. Bibliotektet baserer seg på noen få kompontenter og noen utility hooks.
Stort sett så kan du gjøre det meste du trenger av enkle animasjoner med &lt;code&gt;motion.{htmlElement}&lt;/code&gt;, og &lt;code&gt;AnimatePresence&lt;/code&gt;. AnimatePresence gir muligheten til å lage exit animasjoner, noe som alltid har vært en
utfordring i HTML.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;&amp;lt;AnimatePresence&amp;gt;
    {isOpen &amp;amp;&amp;amp;
        filteredItems.map((item) =&amp;gt; (
            &amp;lt;motion.li
                key={item.title}
                initial={{ y: -60, opacity: 0 }}
                animate={{ y: 0, x: 0, opacity: 1, transition: { duration: 0.25, delay: 0.2 } }}
                exit={{ x: 10, opacity: 0, transition: { duration: 0.25 } }}
                className=&amp;quot;jkl-portal-full-screen-menu-item&amp;quot;
            &amp;gt;
                &amp;lt;FullScreenMenuItem path={item.path} title={item.title} /&amp;gt;
            &amp;lt;/motion.li&amp;gt;
        ))}
&amp;lt;/AnimatePresence&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Dette er animasjonen til hovedmenyen her i portalen. Initial er ikke overaskende startverdien til animasjonen. Denne kan være false, om du ikke vil at første render skal animere noe.
Animate blir overgangen fra intital staten, til elementet er klart. Her er det også spesifisert noe rundt hvor lenge animasjonen skal vare og et lite delay. Exit spesifiserer hvordan
animasjonen ut av DOMet skal være. Noen viktige punkter med dette er at &lt;code&gt;motion&lt;/code&gt; må være første child av &lt;code&gt;AnimatePresence&lt;/code&gt;, dette kravet kommer nok til å forsvinne etterhvert, men
sånn React virker per 16.12.0 må AnimatePresence og motion følge etter hverandre. Det er også viktig med unik key, ikke index, for at Framer Motion skal holde kontroll på elementene.&lt;/p&gt;&lt;p&gt;Noen ganger så må du programatisk sette igang animasjonen, da må du til med litt imperativitet, men vi kan pakke det inn på en måte som fortsatt gir mening i React-verden. I sidemenyen ønsker vi
å animere innholdet i menyen ut med det gamle og inn med de nye når du bytter fra feks &amp;quot;Kompontenter&amp;quot; til &amp;quot;Kom i gang&amp;quot;.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;const controls = useAnimation();

useEffect(() =&amp;gt; {
    (async () =&amp;gt; {
        await controls.start({ x: 0, opacity: 0, transition: { duration: 0.1 } });
        await controls.start({ x: -200, opacity: 0, transition: { duration: 0.2 } });
        await controls.start({ x: 0, opacity: 1, transition: { duration: 0.2 } });
    })();
}, [currentSection, controls]);

return (
    &amp;lt;motion.ul animate={controls} className=&amp;quot;jkl-portal-sidebar-menu__items&amp;quot;&amp;gt;
        &amp;lt;Menu items={items} /&amp;gt;
    &amp;lt;/motion.ul&amp;gt;
);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Så når &lt;code&gt;currentSection&lt;/code&gt; endrer seg, så sparker vi igang en async funksjon som starter animasjonssekvensen med objektet vi får tilbake fra useAnimation hooken.
Vi kobler den til riktig motion element med å sende inn objektet i animate propen. Det gjør at man kan ganske enkelt orkistrere kompliserte animasjoner.&lt;/p&gt;&lt;p&gt;Så langt jeg holdt på med Framer Motion virker det til å være en lovende løsning for å få på plass bevegelsen som Fremtind profilen trenger. Det er fortsatt mye igjen å sette seg inn i,
for å se om dette kan være en god løsning for flere av applikasjonene våre, og om vi skal kunne tilby standardiserte varianter igjenom Jøkul feks. God dokumentasjon, god utvikleropplevelse
og bra resultat, gjør at jeg syns det er verdt å jobbe videre med Framer Motion.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Hvordan blogge i Jøkul]]></title><description><![CDATA[Portalen i Jøkul er ikke bare et komponentbibliotek eller statisk dokumentasjon, det er en portal for alt vi syns hører hjemme her. Og nå inklurerer det en blog.
Hva innholdet skal være her er opp til alle som vil bidra. Denne posten skal prøve å ta for seg hvordan du kan bidra…]]></description><link>https://jokul.fremtind.no/blog/hvordanBlogge/hvordanBlogge/</link><guid isPermaLink="false">https://jokul.fremtind.no/blog/hvordanBlogge/hvordanBlogge/</guid><pubDate>Fri, 05 Jun 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Portalen i Jøkul er ikke bare et komponentbibliotek eller statisk dokumentasjon, det er en portal for alt vi syns hører hjemme her. Og nå inklurerer det en blog.
Hva innholdet skal være her er opp til alle som vil bidra. Denne posten skal prøve å ta for seg hvordan du kan bidra med en post, enten du er utvikler, designer, prosjektleder eller noe annet med noe å dele.&lt;/p&gt;&lt;p&gt;Kort teknisk, Portalen er basert på &lt;a href=&quot;&quot;&gt;gatsby&lt;/a&gt;, en statisk side generator, som baserer seg på &lt;a href=&quot;&quot;&gt;markdown&lt;/a&gt;. Blogposter skiller seg sånn sett veldig lite ut ifra resten av dokumentasjonen i portalen,
så er du komfortabel med å lage dokumentasjon der, så er du veldig nære å kunne lage din blogpost.&lt;/p&gt;&lt;h2&gt;Min første blogpost&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;Naviger deg inn til &lt;code&gt;/portal/src/texts/blog/&lt;/code&gt; i din IDE, eller gå inn på &lt;a href=&quot;https://github.com/fremtind/jokul/tree/main/portal/src/texts/blog&quot;&gt;github her&lt;/a&gt;&lt;/li&gt;&lt;li&gt;I din IDE, lag en ny fil, gi den et fornuftig navn med filendelsen &lt;code&gt;.mdx&lt;/code&gt;.&lt;br/&gt;På github kan du trykke på &lt;code&gt;Create new file&lt;/code&gt;. Det er veldig viktig at fila slutter på &lt;em&gt;.mdx&lt;/em&gt;, gatsby plukker bare opp filer med denne endelsen.
&lt;img src=&quot;/assets/blog/hvordanBlogge/createFile.jpg&quot;/&gt;&lt;/li&gt;&lt;li&gt;I fila må du legge inn litt metadata om posten din.&lt;pre&gt;&lt;code class=&quot;language-mdx&quot;&gt;---
title: Min første bloggpost
author: Forfatter Forfattersen
description: En setning eller to om innholdet i bloggposten, denne vises på forsiden når din post er den nyeste
publishDate: &amp;quot;2020.06.05&amp;quot;
---
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;Resten av fila fyller du med ditt innhold i markdown-format.&lt;br/&gt;Du kan lese mer om hvordan du gjør det &lt;a href=&quot;/preview/feat/stempelvarianter/guider/portalen&quot;&gt;her i portalen&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Så lager du pull request, resten skjer av seg selv!&lt;/li&gt;&lt;/ol&gt;&lt;h3&gt;Hvordan legge til bilde&lt;/h3&gt;&lt;p&gt;Bare tekst kan jo bli litt kjederlig. Du trenger kanskje et bilde for å forklare noe, eller bare et meme for å vise at du følger med i tiden.&lt;/p&gt;&lt;h4&gt;Bruke bilde fra internet&lt;/h4&gt;&lt;ol&gt;&lt;li&gt;Legg bildet direkte inn i &lt;code&gt;.mdx&lt;/code&gt; fila med &lt;code&gt;![](https://adressen-til-bildet.com/bildet.png)&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4&gt;Laste opp eget bilde&lt;/h4&gt;&lt;ol&gt;&lt;li&gt;Naviger deg til &lt;code&gt;/portal/static/assets/blog/&lt;/code&gt; i din IDE,&lt;br/&gt;eller gå inn på &lt;a href=&quot;https://github.com/fremtind/jokul/tree/main/portal/static/assets/blog&quot;&gt;github her&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Legg inn fila di, eller trykk på last opp fil i Github.&lt;br/&gt;Jobber du lokalt må du restarte gatsby før du ser bildet, siden gatsby bare leser statiske assets ved oppstart.&lt;/li&gt;&lt;li&gt;For å få bildet inn i posten din gjør du det med standard markdown,&lt;br/&gt;&lt;code&gt;![](/assets/blog/ditt-bilde.jpg)&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4&gt;Du kan litt React&lt;/h4&gt;&lt;p&gt;Jeg lister ikke opp noe steg her, men avslører heller direkte den ikke så hemmelige hemmeligheten, at du kan putte React kode rett inn i mdx fila. Så vil du ha inn et bilde, gjør &lt;code&gt;import someAsset from &amp;quot;./someAsset.svg&amp;quot;&lt;/code&gt;,
og &lt;code&gt;&amp;lt;img src={someAsset} alt=&amp;quot;Husk alt tekst, det er vanlig høflighet&amp;quot; /&amp;gt;&lt;/code&gt;.&lt;/p&gt;&lt;h2&gt;Oppsummering&lt;/h2&gt;&lt;p&gt;Så, det er ikke så vanskelig, om du er usikker så kan du se på de eksisterende postene og få inspirasjon av de,
feks kan du ta en titt på &lt;a href=&quot;https://github.com/fremtind/jokul/tree/main/portal/src/texts/blog/hvordanBlogge/hvordanBlogge.mdx&quot;&gt;denne posten&lt;/a&gt;.&lt;/p&gt;</content:encoded></item></channel></rss>